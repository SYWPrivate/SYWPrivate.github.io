<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C语言随记</title>
    <url>/2019/11/28/BaseCnotes/</url>
    <content><![CDATA[<h1 id="8194-概述"><a href="#8194-概述" class="headerlink" title="&#8194;概述"></a>&#8194;概述</h1><p>&#8195;<strong>编程基础，随时记录。</strong> </p>
<a id="more"></a>
<h1 id="8194-基础"><a href="#8194-基础" class="headerlink" title="&#8194;基础"></a>&#8194;基础</h1><h2 id="8194-存储单位"><a href="#8194-存储单位" class="headerlink" title="&#8194;存储单位"></a>&#8194;存储单位</h2><ul>
<li><strong>最小：</strong> 一个二进制位：bit (b)</li>
<li><strong>单位：</strong> 一个字节：Byte (B) 1B=8b</li>
<li>千字节：KB = 2^10 B</li>
<li>兆字节：MB = 2^20 B</li>
<li>吉字节：GB = 2^30 B</li>
<li>太字节：TB = 2^40 B</li>
</ul>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>随记</tag>
      </tags>
  </entry>
  <entry>
    <title>改变谷歌背景</title>
    <url>/2019/11/28/GoogleBackground/</url>
    <content><![CDATA[<h1 id="8194-网页顶部"><a href="#8194-网页顶部" class="headerlink" title="&#8194;网页顶部"></a>&#8194;网页顶部</h1><ul>
<li>打开设置-&gt;外观-&gt;主题背景，选择喜欢的背景即可。<a id="more"></a>
<img alt data-src="/2019/11/28/GoogleBackground/1.png"><br><img alt data-src="/2019/11/28/GoogleBackground/2.png"> <h1 id="8194-网页主体"><a href="#8194-网页主体" class="headerlink" title="&#8194;网页主体"></a>&#8194;网页主体</h1></li>
<li>（同上）打开谷歌商店，选择扩展程序，直接搜索程序名称即可（下面有推荐）。<br><img alt data-src="/2019/11/28/GoogleBackground/3.png"><br>&#8194;这里有很多程序可选。<br><img alt data-src="/2019/11/28/GoogleBackground/4.png"><br><img alt data-src="/2019/11/28/GoogleBackground/5.png"> </li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>随记</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Next6.0</title>
    <url>/2019/11/27/HexoNotes/</url>
    <content><![CDATA[<h1 id="8194-字色"><a href="#8194-字色" class="headerlink" title="&#8194;字色"></a>&#8194;字色</h1><p>&#8195;在next\source\css_variables\base.styl文件中<br>&#8195;<strong>$grey-dim  = #666;</strong> 这个颜色是写文章普通用字的颜色，就是写的最多的字的颜色，改成自己需要的即可。  </p><a id="more"></a>
<ul>
<li>例：$grey-dim  = #000;（黑色）<h1 id="8194-文章背景"><a href="#8194-文章背景" class="headerlink" title="&#8194;文章背景"></a>&#8194;文章背景</h1>&#8195;在next\source\css_schemes\Muse\_menu.styl文件中（注：_schemes\Muse的Muse是主题配置文件中所选用的主题，请进入你选用的主题文件夹），加入：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.main-inner &#123;</span><br><span class="line">		background: #f5f5dc;//文章背景颜色</span><br><span class="line">		opacity: 0.8;//文章背景透明度</span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line"># &amp;#8194;网页背景图片</span><br><span class="line">&amp;#8195;在博客源目录\source\_data中创建styles.styl文件，写入代码：</span><br></pre></td></tr></table></figure>
body {<br> background-image:url(/images/back.png);<br> background-repeat: no-repeat;<br> background-attachment:fixed;<br> background-position:50% 50%;<br> }<br>```</li>
<li>本地文件夹：博客源目录\public\images</li>
<li>外部链接直接写入<code>url(...);</code>括号内。</li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>随记</tag>
      </tags>
  </entry>
  <entry>
    <title>文字之美</title>
    <url>/2019/11/26/WordsCollection/</url>
    <content><![CDATA[<blockquote>
<p align="left">要把所有的夜归还给星河，</p><p align="left">把所有的春光归还给疏疏篱落，</p><p align="left">把所有的慵慵沉迷与不前，归还给过去的我。</p><p align="left">明日之我，胸中有丘壑，立马振山河。</p><p align="right">---德卡先生的信箱</p>  
</blockquote>
<a id="more"></a>
<h1 id="8194-历史"><a href="#8194-历史" class="headerlink" title="&#8194;历史"></a>&#8194;历史</h1><blockquote>
<p>&#8195;开国大典的时候飞机不够。您说飞两遍，现在再也不需要飞两遍了，要多少有多少。这盛世，如您所愿吧，山河犹在，国泰民安。当年送您的十里长安街，如今已是十里繁荣。</p>
<p align="right">致：周总理</p>  
<p align="right">---佚名</p>   
</blockquote>
<blockquote>
<p>&#8195;为天地立心，为生民立命，为往圣继绝学，为万世开太平。</p>
<p align="right">---张载</p>   
</blockquote>
<blockquote>
<p>&#8195;成功虽无把握，成仁却有决心。</p>
<p align="right">---黄景升</p>
</blockquote>
<h1 id="8194-灵魂"><a href="#8194-灵魂" class="headerlink" title="&#8194;灵魂"></a>&#8194;灵魂</h1><blockquote>
<p>&#8195;我所有的自负都来自我的自卑，所有的英雄气概都来自于我内心的软弱，所有的振振有词都因为心中满是疑惑。我假装无情，其实痛恨自己深情。我以为人生的意义在于四处游荡流亡，其实只是掩饰至今没有找到愿意驻足的地方。</p>
<p align="right">---马良《坦白书》</p>    
</blockquote>
<blockquote>
<p>&#8195;一生中总会遇到这样的时候，你的内心已经兵荒马乱天翻地覆了，可是在别人看来你只是比平时沉默了一点，没人会觉得奇怪。这种战争，注定单枪匹马。</p>
<p align="right">---白岩松《痛并快乐着》</p>   
</blockquote>
<blockquote>
<p>&#8195;这些年一直在提醒自己一件事情，千万不要感动自己，大部分人看似努力，不过是愚蠢导致的。什么熬夜看书到天亮，连续几天睡几个小时，多久没放假案了。如果这些东西也值得炫耀，那么富士康流水线上任何一个人都比你努力的多了。人难免天生有自怜情绪，唯有时刻保持清醒，才能看清真正的价值在哪里。  </p>
<p align="right">---于宙《我们这一代人的困惑》</p> 
</blockquote>
<h1 id="8194-爱情"><a href="#8194-爱情" class="headerlink" title="&#8194;爱情"></a>&#8194;爱情</h1><blockquote>
<p>&#8195;我希望有个如你一般的人，如山间清爽的风，如古城温暖的光。从清晨到傍晚，由山野到书房。只要最后是你，就好。</p>
<p align="right">---《从你的全世界路过》</p> </blockquote>
]]></content>
      <categories>
        <category>文学</category>
      </categories>
      <tags>
        <tag>随记</tag>
      </tags>
  </entry>
  <entry>
    <title>《数据结构与算法分析——C语言描述》--学习笔记</title>
    <url>/2019/11/26/CDataLenCode/</url>
    <content><![CDATA[<p>&#8195;<strong>多是书中摘要，少是个人见解。</strong></p>
<a id="more"></a>
<h1 id="8194-第一章：引论"><a href="#8194-第一章：引论" class="headerlink" title="&#8194;第一章：引论"></a>&#8194;第一章：引论</h1><h2 id="8194-此书讨论的内容"><a href="#8194-此书讨论的内容" class="headerlink" title="&#8194;此书讨论的内容"></a>&#8194;此书讨论的内容</h2><p>&#8195;<strong>代码的运行时间</strong></p>
<h2 id="8194-涉及的数学知识"><a href="#8194-涉及的数学知识" class="headerlink" title="&#8194;涉及的数学知识"></a>&#8194;涉及的数学知识</h2><h3 id="8194-指数"><a href="#8194-指数" class="headerlink" title="&#8194;指数"></a>&#8194;指数</h3><h3 id="8194-对数"><a href="#8194-对数" class="headerlink" title="&#8194;对数"></a>&#8194;对数</h3><h3 id="8194-级数"><a href="#8194-级数" class="headerlink" title="&#8194;级数"></a>&#8194;级数</h3><h3 id="8194-模运算"><a href="#8194-模运算" class="headerlink" title="&#8194;模运算"></a>&#8194;模运算</h3><h3 id="8194-证明方法"><a href="#8194-证明方法" class="headerlink" title="&#8194;证明方法"></a>&#8194;证明方法</h3><ul>
<li><p>反证法</p>
</li>
<li><p>例：<br>证明：存在无穷多个素数。</p>
</li>
<li><p>数学归纳法</p>
<h3 id="8194-递归简论"><a href="#8194-递归简论" class="headerlink" title="&#8194;递归简论"></a>&#8194;递归简论</h3><h1 id="8194-第二章：算法分析"><a href="#8194-第二章：算法分析" class="headerlink" title="&#8194;第二章：算法分析"></a>&#8194;第二章：算法分析</h1><h2 id="8194-数学基础"><a href="#8194-数学基础" class="headerlink" title="&#8194;数学基础"></a>&#8194;数学基础</h2><h2 id="8194-模型"><a href="#8194-模型" class="headerlink" title="&#8194;模型"></a>&#8194;模型</h2><h2 id="8194-问题"><a href="#8194-问题" class="headerlink" title="&#8194;问题"></a>&#8194;问题</h2><h2 id="8194-运行时间计算"><a href="#8194-运行时间计算" class="headerlink" title="&#8194;运行时间计算"></a>&#8194;运行时间计算</h2><h3 id="8194-一个简单的例子"><a href="#8194-一个简单的例子" class="headerlink" title="&#8194;一个简单的例子"></a>&#8194;一个简单的例子</h3><h3 id="8194-一般法则"><a href="#8194-一般法则" class="headerlink" title="&#8194;一般法则"></a>&#8194;一般法则</h3><h3 id="8194-最大子序列和问题的解"><a href="#8194-最大子序列和问题的解" class="headerlink" title="&#8194;最大子序列和问题的解"></a>&#8194;最大子序列和问题的解</h3></li>
</ul>
<p>&#8194;<strong>这里我只给出两种解：</strong>  </p>
<ul>
<li>次优</li>
<li>时间复杂度O(N log N )</li>
<li>递归+分治<p align="left">   

</p></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">	int MaxSubSum(int A[], int Left, int Right);</span><br><span class="line">	int A[8] = &#123; 4,-3,5,-2,-1,2,6,-2 &#125;;</span><br><span class="line">	int a = MaxSubSum(A, 0, 7);</span><br><span class="line">	printf(&quot;%d\n&quot;, a);</span><br><span class="line">&#125;</span><br><span class="line">int MaxSubSum(int A[], int Left, int Right)</span><br><span class="line">&#123;</span><br><span class="line">	int MaxThree(int a, int b, int c);</span><br><span class="line">	int MaxLeftSum, MaxRightSum;</span><br><span class="line">	int MaxLeftBorderSum, MaxRightBorderSum;</span><br><span class="line">	int LeftBorderSum, RightBorderSum;</span><br><span class="line">	int Center, i;</span><br><span class="line">	if (Left == Right)</span><br><span class="line">	&#123;</span><br><span class="line">		if (A[Left] &gt; 0)</span><br><span class="line">			return A[Left];</span><br><span class="line">		else</span><br><span class="line">			return 0;</span><br><span class="line">	&#125;</span><br><span class="line">	Center = (Left + Right) / 2;</span><br><span class="line">	MaxLeftSum = MaxSubSum(A, Left, Center);</span><br><span class="line">	MaxRightSum = MaxSubSum(A, Center + 1, Right);</span><br><span class="line">	MaxLeftBorderSum = 0;</span><br><span class="line">	LeftBorderSum = 0;</span><br><span class="line">	for (i = Center; i &gt;= Left; i--)</span><br><span class="line">	&#123;</span><br><span class="line">		LeftBorderSum += A[i];</span><br><span class="line">		if (LeftBorderSum &gt; MaxLeftBorderSum)</span><br><span class="line">			MaxLeftBorderSum = LeftBorderSum;</span><br><span class="line">	&#125;</span><br><span class="line">	MaxRightBorderSum = 0;</span><br><span class="line">	RightBorderSum = 0;</span><br><span class="line">	for (i = Center + 1; i &lt;= Right; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		RightBorderSum += A[i];</span><br><span class="line">		if (RightBorderSum &gt; MaxRightBorderSum)</span><br><span class="line">			MaxRightBorderSum = RightBorderSum;</span><br><span class="line">	&#125;</span><br><span class="line">	return MaxThree(MaxLeftSum, MaxRightSum, MaxLeftBorderSum + MaxRightBorderSum);</span><br><span class="line">&#125;</span><br><span class="line">int MaxThree(int a, int b, int c)</span><br><span class="line">&#123;</span><br><span class="line">	if (a &gt; b&amp;&amp;a &gt; c)</span><br><span class="line">		return a;</span><br><span class="line">	else if (b &gt; c)</span><br><span class="line">		return b;</span><br><span class="line">	else return c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p></p>  

<ul>
<li><strong>最优</strong><h1 id="8194-第三章：表、栈和队列"><a href="#8194-第三章：表、栈和队列" class="headerlink" title="&#8194;第三章：表、栈和队列"></a>&#8194;第三章：表、栈和队列</h1><h2 id="8194-抽象数据类型（ADT）"><a href="#8194-抽象数据类型（ADT）" class="headerlink" title="&#8194;抽象数据类型（ADT）"></a>&#8194;抽象数据类型（ADT）</h2><h2 id="8194-表ADT"><a href="#8194-表ADT" class="headerlink" title="&#8194;表ADT"></a>&#8194;表ADT</h2><h3 id="8194-表的简单数组实现"><a href="#8194-表的简单数组实现" class="headerlink" title="&#8194;表的简单数组实现"></a>&#8194;表的简单数组实现</h3><h3 id="8194-链表"><a href="#8194-链表" class="headerlink" title="&#8194;链表"></a>&#8194;链表</h3><h3 id="8194-程序设计细节"><a href="#8194-程序设计细节" class="headerlink" title="&#8194;程序设计细节"></a>&#8194;程序设计细节</h3><h3 id="8194-常见错误"><a href="#8194-常见错误" class="headerlink" title="&#8194;常见错误"></a>&#8194;常见错误</h3><h3 id="8194-双链表"><a href="#8194-双链表" class="headerlink" title="&#8194;双链表"></a>&#8194;双链表</h3><h3 id="8194-循环链表"><a href="#8194-循环链表" class="headerlink" title="&#8194;循环链表"></a>&#8194;循环链表</h3><h3 id="8194-例子"><a href="#8194-例子" class="headerlink" title="&#8194;例子"></a>&#8194;例子</h3><h3 id="8194-链表的游标实现"><a href="#8194-链表的游标实现" class="headerlink" title="&#8194;链表的游标实现"></a>&#8194;链表的游标实现</h3><h2 id="8194-栈ADT"><a href="#8194-栈ADT" class="headerlink" title="&#8194;栈ADT"></a>&#8194;栈ADT</h2></li>
</ul>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C-Book</tag>
      </tags>
  </entry>
  <entry>
    <title>C#随记</title>
    <url>/2019/11/25/C-Notes/</url>
    <content><![CDATA[<h1 id="8194-概述"><a href="#8194-概述" class="headerlink" title="&#8194;概述"></a>&#8194;概述</h1><ul>
<li>写C#窗体程序的相关记录。本文仅仅是自己的一些见解和遇到的问题，<strong>并不完全正确！请注意！</strong> <a id="more"></a>
<h1 id="8194-问题"><a href="#8194-问题" class="headerlink" title="&#8194;问题"></a>&#8194;问题</h1><h2 id="8194-程序调试运行无反应"><a href="#8194-程序调试运行无反应" class="headerlink" title="&#8194;程序调试运行无反应"></a>&#8194;程序调试运行无反应</h2></li>
<li>加载各个窗体时，有一个窗体初始化函数内，写了一个<strong>需要一直循环的函数</strong>。点击调试运行时，初始化函数一直在运行，所以界面加载不出来，看起来就毫无反应。</li>
<li><strong>解：</strong> 写了个线程，加载时打开线程，在线程中<code>while(true){...}</code>做需要一直做的事，就行了。<h1 id="8194-随笔"><a href="#8194-随笔" class="headerlink" title="&#8194;随笔"></a>&#8194;随笔</h1><h2 id="8194-绘图"><a href="#8194-绘图" class="headerlink" title="&#8194;绘图"></a>&#8194;绘图</h2></li>
<li>Graphics绘图  </li>
<li><strong>优点：</strong> 全面：所有线条，字体等等都由自己选择。  </li>
<li><strong>缺点：</strong> 绘制动图有点费劲，<code>Graphics.Clear(60,255,255,255);</code>//Clear函数只能以指定颜色重绘画布Bitmap，参数1：透明度（可不写），参数234：三原色。<h3 id="8194-控件Panel"><a href="#8194-控件Panel" class="headerlink" title="&#8194;控件Panel"></a>&#8194;控件Panel</h3>&#8195;Panel外观：Backgroundimage，可以Panel.Backgroundimage=Bitmap加载图画。而且Panel.Paint事件可以在加载的背景上绘图。  <h1 id="8194-知识点"><a href="#8194-知识点" class="headerlink" title="&#8194;知识点"></a>&#8194;知识点</h1><h2 id="8194-Time"><a href="#8194-Time" class="headerlink" title="&#8194;Time"></a>&#8194;Time</h2><h3 id="8194-时间格式"><a href="#8194-时间格式" class="headerlink" title="&#8194;时间格式"></a>&#8194;时间格式</h3><code>DateTime TimeNow= DateTime.Now.ToString();//2019-12-12 1:12:12 Length=18</code></li>
<li>我们需要的是<strong>固定长度和格式</strong>的时间或字符串。<br><code>&quot;2019-12-12 01:12:12//Length=19&quot;</code>  </li>
<li>所以<code>DateTime TimeNow= DateTime.Now.ToString(&quot;yyyy/MM/dd HH:mm:ss&quot;);//是必须的</code>  <h3 id="8194-时间转换"><a href="#8194-时间转换" class="headerlink" title="&#8194;时间转换"></a>&#8194;时间转换</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DateTime TimeNow = DateTime.Parse(&quot;2019/12/12 01:00:01&quot;);</span><br><span class="line">label1.Text = TimeNow.ToString();//  2019/12/12 1:00:01</span><br></pre></td></tr></table></figure>
<h3 id="8194-时间计算"><a href="#8194-时间计算" class="headerlink" title="&#8194;时间计算"></a>&#8194;时间计算</h3></li>
<li>时间差计算<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DateTime TimeNow, TimePast;  // 意思意思，没赋值</span><br><span class="line">TimeSpan TimeDiffer = TimeNow.Subtract(TimePast);</span><br><span class="line">//以下都是  double</span><br><span class="line">TimeDiffer.TotalDays;</span><br><span class="line">TimeDiffer.TotalHours;</span><br><span class="line">TimeDiffer.TotalMinutes;</span><br><span class="line">TimeDiffer.TotalSeconds;</span><br></pre></td></tr></table></figure></li>
<li>时间加减计算<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DateTime TimeNow, TimePast;</span><br><span class="line">TimeNow=TimePast.AddHours(-4);</span><br><span class="line">TimeNow=TimePast.AddMinutes(-100);</span><br></pre></td></tr></table></figure>
<h2 id="8194-绘图-1"><a href="#8194-绘图-1" class="headerlink" title="&#8194;绘图"></a>&#8194;绘图</h2><h3 id="8194-Graphics"><a href="#8194-Graphics" class="headerlink" title="&#8194;Graphics"></a>&#8194;Graphics</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Bitmap Background = new Bitmap(1200,680);//画板</span><br><span class="line">Graphics Grap = Graphics.FromImage(Background);//加载画板</span><br><span class="line">Grap.DrawLine(int,int,int,int);</span><br><span class="line">Grap.DrawLine(Pen pen,float x1,float y1,float x2,float y2);</span><br></pre></td></tr></table></figure>
<h2 id="8194-线程"><a href="#8194-线程" class="headerlink" title="&#8194;线程"></a>&#8194;线程</h2></li>
<li>创建并打开线程<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Thread Study = new Thread(new ThreadStart(StudyFunction));</span><br><span class="line">Study.Start();</span><br><span class="line">private void StudyFunction()</span><br><span class="line">&#123;</span><br><span class="line"> while(true)&#123;</span><br><span class="line">     ......</span><br><span class="line">     Thread.Sleep(1000*30)//线程睡30S</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>操作线程<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Study.Suspend()//挂起，暂时不做了</span><br><span class="line">Study.Resume()//恢复，继续刚才没做完的</span><br><span class="line">Study.Abort()//停止，杀死该进程</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Study.Join()//等待Study完成主线程继续</span><br><span class="line">Study.Join(1000*30)//主线程等待30S</span><br></pre></td></tr></table></figure>
<h2 id="8194-事件"><a href="#8194-事件" class="headerlink" title="&#8194;事件"></a>&#8194;事件</h2></li>
<li><code>MouseClick = MouseDown + MouseUp</code>（一般执行完Down/Up会自动继续执行Click）</li>
</ul>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>随记</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle语句</title>
    <url>/2019/11/22/oraclestate/</url>
    <content><![CDATA[<h1 id="8194-基础语句"><a href="#8194-基础语句" class="headerlink" title="&#8194;基础语句"></a>&#8194;基础语句</h1><h2 id="8194-概述"><a href="#8194-概述" class="headerlink" title="&#8194;概述"></a>&#8194;概述</h2><ul>
<li>Oracle语句与SQL语句还是有很多不一样的地方。</li>
<li>都是些基础的，毕竟我也是业余的。<h2 id="8194-查询"><a href="#8194-查询" class="headerlink" title="&#8194;查询"></a>&#8194;查询</h2><h3 id="8194-时间"><a href="#8194-时间" class="headerlink" title="&#8194;时间"></a>&#8194;时间</h3><code>select * from 表名 where sysdate-1 &lt;=Time  //Time为表中，时间列，列名（此句：查找一天内数据）</code><br><code>select * from 表名 where sysdate-1/24 &lt;=Time  //Time为表中，时间列，列名（此句：查找1H内数据）</code> </li>
</ul>]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>解数独</title>
    <url>/2019/11/22/shudu/</url>
    <content><![CDATA[<p>&#8195;主要分享一下解数独的源代码，用到了比较重要的回溯算法！</p>
<a id="more"></a>
<center>程序界面</center> 

<div align="center"><img width="400" height="400" data-src="/2019/11/22/shudu/1.png"></div>  

<p>源代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">namespace shudu</span><br><span class="line">&#123;</span><br><span class="line">    public partial class form : Form</span><br><span class="line">    &#123;</span><br><span class="line">        public form()</span><br><span class="line">        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private void Form1_Load(object sender, EventArgs e)</span><br><span class="line">        &#123;</span><br><span class="line">            data.ColumnCount = 9;</span><br><span class="line">            data.RowCount = 9;</span><br><span class="line">            for (int i = 0; i &lt; 9; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                data.Columns[i].Width = 41;</span><br><span class="line">                data.Rows[i].Height = 40;</span><br><span class="line">            &#125;</span><br><span class="line">            for (int i = 0; i &lt; 9; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                for (int j = 0; j &lt; 9; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    data.Rows[i].Cells[j].Value = &quot;&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private void button1_Click(object sender, EventArgs e)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            for (int i = 0; i &lt; 9; i++)</span><br><span class="line">                for (int j = 0; j &lt; 9; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    if (data.Rows[i].Cells[j].Value.ToString() == &quot;&quot;)</span><br><span class="line">                        data.Rows[i].Cells[j].Value = &quot;.&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">            solveSudoku();</span><br><span class="line">        &#125;</span><br><span class="line">        bool solved = false;</span><br><span class="line">        private void solveSudoku()</span><br><span class="line">        &#123;</span><br><span class="line">            recursive(0, 0);</span><br><span class="line">        &#125;</span><br><span class="line">        private void recursive(int row, int col)</span><br><span class="line">        &#123;</span><br><span class="line">            if (data.Rows[row].Cells[col].Value.ToString()==&quot;.&quot;)</span><br><span class="line">            &#123;</span><br><span class="line">                int i = 1;</span><br><span class="line">                for (; i &lt; 10; i++)</span><br><span class="line">                    if (TF(i, row, col))</span><br><span class="line">                    &#123;</span><br><span class="line">                        write(i, row, col);</span><br><span class="line">                        writenext(row, col);</span><br><span class="line">                        if (!solved) del( row, col);</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else writenext( row, col);</span><br><span class="line">        &#125;</span><br><span class="line">        private  bool TF( int num, int row, int col)</span><br><span class="line">        &#123;</span><br><span class="line">            int rowindex = row / 3, colindex = col / 3;</span><br><span class="line">            for (int i = 0; i &lt; 3; i++)</span><br><span class="line">                for (int j = 0; j &lt; 3; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    if (data.Rows[rowindex * 3 + i].Cells[colindex * 3 + j].Value.ToString() == num.ToString())</span><br><span class="line">                        return false;</span><br><span class="line">                &#125;</span><br><span class="line">            for (int i = 0; i &lt; 9; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                if (data.Rows[row].Cells[i].Value.ToString() == num.ToString() || data.Rows[i].Cells[col].Value.ToString() == num.ToString())</span><br><span class="line">                    return false;</span><br><span class="line">            &#125;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        private void write( int num, int row, int col)</span><br><span class="line">        &#123;</span><br><span class="line">            data.Rows[row].Cells[col].Value = num.ToString();</span><br><span class="line">        &#125;</span><br><span class="line">        private  void writenext(int row, int col)</span><br><span class="line">        &#123;</span><br><span class="line">            if (row == 8 &amp;&amp; col == 8) solved = true;</span><br><span class="line">            else if (col &lt; 8) recursive(row, col + 1);</span><br><span class="line">            else if (row &lt; 8) recursive(row + 1, 0);</span><br><span class="line">        &#125;</span><br><span class="line">        private void del(int row, int col)</span><br><span class="line">        &#123;</span><br><span class="line">            data.Rows[row].Cells[col].Value = &quot;.&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private void button2_Click(object sender, EventArgs e)</span><br><span class="line">        &#123;</span><br><span class="line">            solved = false;</span><br><span class="line">            for (int i = 0; i &lt; 9; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                for (int j = 0; j &lt; 9; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    data.Rows[i].Cells[j].Value = &quot;&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&#8195;程序也放上来，大家可以下下来玩玩。<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1NZV1ByaXZhdGUvU1lXUHJpdmF0ZS5naXRodWIuaW8vcmF3L21hc3Rlci8yMDE5LzExLzIyL3NodWR1L3NodWR1LmV4ZQ==" title="https://github.com/SYWPrivate/SYWPrivate.github.io/raw/master/2019/11/22/shudu/shudu.exe">点击下载<i class="fa fa-external-link"></i></span><br><strong>&#8195;每次求解后，若要求新数独，请刷新充填。</strong><br>&#8195;若要只改变部分格内的值（改变或删除），就继续求解，需要在源代码内加入<code>data_CellValueChanged()</code>函数。我就不多说啦！</p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#窗体程序</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows指令</title>
    <url>/2019/11/20/runwindows/</url>
    <content><![CDATA[<h1 id="8194-前言"><a href="#8194-前言" class="headerlink" title="&#8194;前言"></a>&#8194;前言</h1><ul>
<li><p>本文主要关于Windows相关指令，<strong>Win+R</strong>打开输入框。输入以下指令即可打开不同功能。  </p>
<h1 id="8194-环回网络"><a href="#8194-环回网络" class="headerlink" title="&#8194;环回网络"></a>&#8194;环回网络</h1></li>
<li><p>hdwwiz  </p>
<h1 id="8194-远程桌面"><a href="#8194-远程桌面" class="headerlink" title="&#8194;远程桌面"></a>&#8194;远程桌面</h1></li>
<li><p>mstsc</p>
</li>
</ul>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>随记</tag>
      </tags>
  </entry>
  <entry>
    <title>ORA-01045</title>
    <url>/2019/11/20/ORA01045/</url>
    <content><![CDATA[<p><code>ORA-01045: user 某某用户 lacks CREATE SESSION privilege; logon denied</code><br><strong>权限问题</strong>：以system用户登录，运行以下指令。<br><code>grant create session,resource  to 某某用户；</code></p>]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>随记</tag>
      </tags>
  </entry>
  <entry>
    <title>ORA-00911</title>
    <url>/2019/11/20/ORA00911/</url>
    <content><![CDATA[<p>外部程序操作数据库，书写SQL语句，若如下：<br><code>insert into syw.tempdata(TEMP,TIME) values</code><br> <code>(200,to_date(&#39;2019/11/20 9:46:06&#39;,&#39;YYYY-MM-DD HH24:MI:SS&#39;));</code>   </p><a id="more"></a>
<p>会报错：ORA-00911<br>因为外部程序中书写SQL语句末尾不用加 <strong>“;”</strong> 号。</p>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>随记</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows窗体应用程序</title>
    <url>/2019/11/19/Sensorproject/</url>
    <content><![CDATA[<h1 id="8194-概述"><a href="#8194-概述" class="headerlink" title="&#8194;概述"></a>&#8194;概述</h1><p>&#8195;这是一个被写的尽量<strong>全面而浅显</strong>的<strong>完整的工程项目实例</strong>。<br>&#8195;<strong>语言：C#<br>&#8195;框架：Windows窗体应用程序<br>&#8195;通讯：串口通信（协议：Modbus）<br>&#8195;数据库：Oracle。</strong>    </p>
<a id="more"></a>
<p>&#8195;这个项目实现了与一个或多个自动化设备通信，自动的读取、修改设备的当前数据、状态，并将需要保存的数据放入Oracle数据库，可以按要求调出查看。</p>
<h1 id="8194-前言"><a href="#8194-前言" class="headerlink" title="&#8194;前言"></a>&#8194;前言</h1><p>&#8195;写一个完整的项目，不仅需要<strong>浅显易懂的变量名</strong>，而且需要<strong>非常清晰的错误文档</strong>。这两点非常非常重要！！！在写程序之前，有必要先讨论一下这两点。 </p>
<p>&#8195;1. 变量名<br>&#8195;举例：GetHexStrFrombytes(byte[] byteSource) {…}<br>&#8195;这个函数的作用是：将传入的字节数组转换成<strong>十六进制字符串</strong>（如：”0106A3C2FF002FE2”）。<br>&#8195;那么显而易见的：GetBytesFromHexStr(string strSource) {…}<br>&#8195;这个函数的作用就是：将传入的十六进制字符串转换为字节数组。<br>&#8195;每写一个函数，都需要在旁边<strong>注释清楚</strong>这个函数的功能。  </p>
<p>&#8195;2. <strong>错误文档</strong>：<br>&#8195;原因：一个工程项目的线程不少，功能模块更多，正常调试很多问题根本发现不了。<br>&#8195;比如通讯过程中串口断开，是因为哪个线程，哪个功能，还是串口松了，还是设备问题。你很难调试的明白。<br>&#8195;方法：<br>&#8195;1. <strong>给各个线程及功能添加特有Tags，catch异常时，将Tags传入写异常函数(将异常字符串写入List&lt;string&gt; StrlistException)。</strong><br>&#8195;2. <strong>各个线程需要调用同一函数写异常，否则程序易爆炸。</strong><br>&#8195;3. <strong>不同线程可用数字标记，这样调试时（写异常函数）可指定线程写异常，方便追踪。</strong><br>&#8195;4. <strong>关于异常：请加上足够多的修饰（例如：当时的输入、时间、相关的全局变量值等等）。</strong><br>&#8195;上述这些内容对于一个完整工程真的很重要！！！切记。   </p>
<h1 id="8194-主函数"><a href="#8194-主函数" class="headerlink" title="&#8194;主函数"></a>&#8194;主函数</h1><p>&#8195;概述：基本是废话。<br>&#8195;主函数内容相对简单，页面布局也是个人喜好。<br>&#8195;功能：切换页面（如果只用一个界面都不用切；如果要切，百度一下，很简单）。  </p>
<h2 id="8195-副主函数（副窗体）"><a href="#8195-副主函数（副窗体）" class="headerlink" title="&#8195;副主函数（副窗体）"></a>&#8195;副主函数（副窗体）</h2><p>&#8195;<strong>如果你没有副窗体，那这就是你的主窗体！</strong><br>&#8195;在窗体上放上你需要的控件，选择合适的事件，编写代码。  </p>
<h1 id="8194-串口通信"><a href="#8194-串口通信" class="headerlink" title="&#8194;串口通信"></a>&#8194;串口通信</h1><h2 id="8194-概述-1"><a href="#8194-概述-1" class="headerlink" title="&#8194;概述"></a>&#8194;概述</h2><p>&#8195;物理通信方式（不重要）：<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9SUy0yMzI=" title="https://baike.baidu.com/item/RS-232"><strong>RS-232</strong><i class="fa fa-external-link"></i></span>全双工通信。<br>&#8195;通讯协议（Modbus）:RTU模式，自动化领域常用。（下面会简单介绍怎么用）<br>&#8195;<strong>程序通信方式</strong>：收发分开。</p>
<h2 id="8194-通信报文"><a href="#8194-通信报文" class="headerlink" title="&#8194;通信报文"></a>&#8194;通信报文</h2><ul>
<li>写入串口（发）：设备地址+功能代码+数据+<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9DUkMvMTQ1MzM1OQ==" title="https://baike.baidu.com/item/CRC/1453359">CRC<i class="fa fa-external-link"></i></span>校验<br>&#8195;设备地址：0x00~0xF7(可连接248个设备)，假设接入一个设备（地址01）。<br>&#8195;功能代码：0x01~0xFF。假设：01（读数据）、02（写数据），这个需要通信协议。<br>&#8195;数据：寄存器首地址+寄存器数量。这就相当于数组首地址（2 byte）+读取长度（2 byte）。比如：00 FF + 00 01（从地址为255的寄存器开始读一个寄存器数据）。<br>&#8195;CRC校验：占两个字节（2 byte）。可以自己百度下相关内容。下面是我百度后自己写的一个。将：01 01 00 FF 00 01 传入CRC，算出校验码：CD FA。<br>所以，写入串口：01 01 <strong>00 FF 00 01</strong> CD FA</li>
<li>读取数据（收）：设备地址+功能代码+数据+CRC<br>&#8195;这里唯一不同的就是数据：数据字节数+数据。例如：01 + 01 。<br>&#8195;就是返回了一个字节数据，返回的数据为：0x01，就是返回值为：1 。<br>&#8195;所以返回的报文是：01 01 <strong>01 01</strong> 90 48<br>&#8195;<strong>加粗部分为数据</strong><p align="left">

</p></li>
</ul>
<pre><code>public static byte[] CRC(byte[] source)//CRC校验码计算
      {
          UInt16 res = 0xffff;
          for (int i = 0; i &lt; source.Length; i++)
          {
              res ^= source[i];
              for (int j = 0; j &lt; 8; j++)
              {
                  int a = res &amp; 1;
                  res &gt;&gt;= 1;
                  if (a == 1) res ^= 0xA001;
              }
          }
          byte[] result = new byte[2];
          int m = res &amp; 0xff;
          result[0] = (byte)m;
          m = res &gt;&gt; 8;
          result[1] = (byte)m;
          return result;
      }</code></pre><p></p>

<h2 id="8194-通信实现"><a href="#8194-通信实现" class="headerlink" title="&#8194;通信实现"></a>&#8194;通信实现</h2><h3 id="8194-概述-2"><a href="#8194-概述-2" class="headerlink" title="&#8194;概述"></a>&#8194;概述</h3><p>&#8195;通信其实一般都不会采用：发送报文–等待接收–接收到–程序继续，这种方式，我也不多说。<br>&#8195;通信的一般方法是：<br><code>public List&lt;string&gt; arrDataToPort = null, arrDataFromPort = null;</code><br>&#8195;发送：创建发送报文线程（DataSend()），不停检查arrDataToPort是否为空，不为空，则lock(arrDataToPort),发出报文，清空arrDataToPort。<br>&#8195;有要发送的报文，就lock(arrDataToPort)，写入报文即可。<br>&#8195;接收：接收自有<strong>接收响应事件</strong>，这里的重点是：将接收到的所有内容放到一个<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9TdHJpbmdCdWlsZGVy" title="https://baike.baidu.com/item/StringBuilder">StringBuilder<i class="fa fa-external-link"></i></span> strData中，然后处理字符串即可。（这个在处理接收数据中再详细讨论）</p>
<h1 id="8194-数据库"><a href="#8194-数据库" class="headerlink" title="&#8194;数据库"></a>&#8194;数据库</h1><p>&#8195;？？？</p>
<h1 id="8194-绘图"><a href="#8194-绘图" class="headerlink" title="&#8194;绘图"></a>&#8194;绘图</h1><p>&#8195;：：：</p>
<h1 id="8194-通用"><a href="#8194-通用" class="headerlink" title="&#8194;通用"></a>&#8194;通用</h1><p>&#8195;：：</p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#窗体程序</tag>
        <tag>通讯</tag>
        <tag>数据库</tag>
        <tag>绘图</tag>
      </tags>
  </entry>
  <entry>
    <title>《爱如半夜汽笛》</title>
    <url>/2019/11/14/DistantWhistle/</url>
    <content><![CDATA[<blockquote>
<p>女孩问男孩：“你喜欢我喜欢到什么程度？”</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>少年想了想，用沉静的声音说：“半夜汽笛那个程度。”</p>
</blockquote>
<blockquote>
<p>少女默默地等待下文，里面肯定有什么故事。 </p>
</blockquote>
<blockquote>
<p>“一次，半夜突然醒来，”他开始讲述，“确切时间不清楚，大约两三点吧。也就那个时间，什么时候并不重要。总之是夜深时分，我完完全全孤单一人，身边谁也没有，好吗？请你想象一下，四下漆黑一片，什么也看不见，什么也听不见，就连时钟声都听不见，也可能钟停了。我忽然觉得自己正被隔离开来，远离自己认识的人，远离自己熟悉的场所，远得无法置信。在这广大世界上不为任何人所爱，不为任何人理解，不为任何人记起，我发现自己成了这样的存在。”</p>
</blockquote>
<blockquote>
<p>“即使我就这么消失不见，也没有人察觉，那种心情简直就像被塞进厚铁箱沉入深海底。由于气压的关系，心脏开始痛，痛得像要咔哧咔哧裂成两半，这滋味你可知道。”</p>
</blockquote>
<blockquote>
<p>少女点点头，想必她是知道的。</p>
</blockquote>
<blockquote>
<p>少年继续说道，“这大概是人活着的过程中所能体验到的最难以忍受的一种感觉，又伤心又难过，<br>恨不得直接死掉算了。不，不是这样，不是死掉算了，而是假如放在那里不管，就真的死掉了。因为铁箱里的空气越来越稀薄了，这可不是什么比喻，是真的，这也就是深夜里孤单单醒来的含义，这你也明白？”</p>
</blockquote>
<blockquote>
<p>少女再次默默点头，少年停了一会儿。</p>
</blockquote>
<blockquote>
<p>“不过当时听见很远很远的地方有汽笛声，非常非常遥远，到底什么地方有铁路呢？莫名其妙，总之就那么远，声音若有若无，但我知道那是火车的汽笛声，肯定是！黑暗中我竖耳细听，于是又一次听到了汽笛声。很快，我的心脏不再痛了，时针开始走动，铁箱朝海面慢慢浮升，而这都是因为那微弱的汽笛声的关系。”</p>
</blockquote>
<blockquote>
<p>汽笛声的确微弱，听见没听见都分不清，而我就像爱那汽笛一样爱你。</p>
</blockquote>
<blockquote>
<p><strong><p align="right">——村上春树</p></strong>  </p>
</blockquote>
]]></content>
      <categories>
        <category>文学</category>
      </categories>
      <tags>
        <tag>让人倾心的文字</tag>
      </tags>
  </entry>
</search>
