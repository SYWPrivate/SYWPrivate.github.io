<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">
  <title>界外的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-10-19T10:14:33.832Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>界外</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NetCLRvia</title>
    <link href="http://yoursite.com/2020/09/22/NetCLRvia/"/>
    <id>http://yoursite.com/2020/09/22/NetCLRvia/</id>
    <published>2020-09-22T09:07:32.358Z</published>
    <updated>2020-10-19T10:14:33.832Z</updated>
    
    <content type="html"><![CDATA[<h1 id="8194-概述"><a href="#8194-概述" class="headerlink" title="&#8194;概述"></a>&#8194;概述</h1><p>&#8195;<strong>C#编程基础，CLR学习记录</strong></p><a id="more"></a><h1 id="8194-第一部分"><a href="#8194-第一部分" class="headerlink" title="&#8194;第一部分"></a>&#8194;第一部分</h1><h2 id="8195-第1章-CLR的执行模型"><a href="#8195-第1章-CLR的执行模型" class="headerlink" title="&#8195;第1章 CLR的执行模型"></a>&#8195;第1章 CLR的执行模型</h2><p><strong>本章内容：</strong></p><ul><li>将源代码编译成托管模块</li><li>将托管模块合并成程序集</li><li>加载公共语言运行时</li><li>执行程序集的代码</li><li>本机代码生成器：NGen.exe</li><li>Framework类库入门</li><li>通用类型系统</li><li>公共语言规范(CLS)</li><li>与非托管代码的互操作性<h3 id="8195-1-1-将源代码编译成托管模块"><a href="#8195-1-1-将源代码编译成托管模块" class="headerlink" title="&#8195; 1.1 将源代码编译成托管模块"></a>&#8195; 1.1 将源代码编译成托管模块</h3><blockquote><p>公共语言运行时(Common Language Runtime,CLR)核心功能：内存管理、程序集加载、安全性、异常处理和线程同步。  </p></blockquote></li></ul><blockquote><p>CLR面向多种语言：C++、C#、VB、F#以及一个“中间语言”(Intermediate Language,IL)汇编器。   </p></blockquote><blockquote><p>源文件(C#、VB、IL)–&gt;编译器–&gt;托管模块（中间语言和元数据）。      </p></blockquote><blockquote><p>CLR在 .NET Framework 中。  </p></blockquote><blockquote><h4 id="托管模块的组成"><a href="#托管模块的组成" class="headerlink" title="托管模块的组成"></a>托管模块的组成</h4><ul><li>标准Windows PE文件头  <ol><li>PE32：Windows 32位和64位版本运行</li><li>PE32+: Windows 32位版本运行</li></ol></li><li>CLR头<ol><li>CLR版本</li><li>一些Flag</li><li>托管模块入口方法（Main方法）的MethodDef 元数据 token </li><li>模块的元数据、资源、强名称、一些标志</li><li>不太重要的数据项的位置/大小</li></ol></li><li>元数据<ol><li>源代码中定义的类型和成员</li><li>源代码引用的类型和成员</li></ol></li><li>IL（中间语言）代码：编译源代码生成的代码。在运行时，CLR将IL编译成本机CPU指令。IL代码有时称为托管代码，因为CLR管理它执行。  </li></ul></blockquote><p>注：<strong>元数据与IL代码密不可分，永远同步。</strong>  </p><blockquote><h4 id="元数据作用"><a href="#元数据作用" class="headerlink" title="元数据作用"></a>元数据作用</h4><ul><li>避免对原生头和库文件的依赖，元数据中有需要的所有引用</li><li>Visual Studio智能感知类的所有成员</li><li>CLR依赖元数据确保只执行“类型安全”的操作</li><li>元数据允许将对象的字段序列化到内存中发送到另一台电脑中反序列化重建类的状态</li><li>垃圾回收器跟踪引用，无引用回收  </li></ul></blockquote><p>注：<strong>C++可以编译成托管代码或非托管代码</strong>  </p><h3 id="8195-1-2-将托管模块合并成程序集"><a href="#8195-1-2-将托管模块合并成程序集" class="headerlink" title="&#8195; 1.2 将托管模块合并成程序集"></a>&#8195; 1.2 将托管模块合并成程序集</h3><blockquote><p><strong>程序集</strong>（assembly）是抽象概念。程序集是一个或多个模块/资源文件的逻辑性分组。程序集是重用、安全性以及版本控制的最小单元。     </p></blockquote><blockquote><p>编译器默认将生成的托管模块转换成程序集。    </p></blockquote><blockquote><p>程序集包含引用的程序集的有关信息，所以程序集能够自描述。   </p></blockquote><blockquote><p>CLR能够判断程序集的依赖，不需要注册表或Action Directory Domain Services保存额外信息，所以程序集更容易部署。   </p></blockquote><h3 id="8195-1-3-加载公共语言运行时"><a href="#8195-1-3-加载公共语言运行时" class="headerlink" title="&#8195; 1.3 加载公共语言运行时"></a>&#8195; 1.3 加载公共语言运行时</h3><blockquote><p>如果程序集文件只包含类型安全的托管代码，在32位64位Windows上都能正常工作。    </p></blockquote><blockquote><p><strong>Windows检查EXE文件头，决定创建32位或64位进程，在进程地址空间加载MSCorEE.dll，然后进程的主线程调用MSCorEE.dll中的一个方法。这个方法初始化CLR，加载EXE程序集，在调用其入口方法(Main)。随即，托管应用程序启动并运行。</strong></p></blockquote><h3 id="8195-1-4-执行程序集的代码"><a href="#8195-1-4-执行程序集的代码" class="headerlink" title="&#8195; 1.4 执行程序集的代码"></a>&#8195; 1.4 执行程序集的代码</h3><ul><li>IL汇编器：ILAsm.exe  </li><li>IL反汇编器：ILDasm.exe  </li><li><em>CLR明显允许多语言混编*</em>     <h4 id="执行方法"><a href="#执行方法" class="headerlink" title="执行方法"></a>执行方法</h4><blockquote><p>首先需要将IL转换成本机CPU指令。这是CLR的JIT(just-in-time即时)编译器的职责。  </p></blockquote></li></ul><blockquote><ul><li>首次调用方法<code>Console.WriteLine(&quot;Hello&quot;);</code></li></ul><ol><li>在负责实现类型(Console)的程序集的元数据中查找被调用方法(WriteLine)</li><li>从元数据中获取该方法的IL</li><li>分配内存块</li><li>将IL编译成本机CPU指令放入3中的内存</li><li>在Type表中修改与方法对应的条目，使它指向3中的内存块</li><li>跳转到内存块中本机代码  </li></ol><ul><li>再次调用<code>Console.WriteLine(&quot;Bye&quot;);</code>方法，直接执行CPU指令     </li></ul></blockquote><blockquote><p>托管代码运行时需要再编译成CPU指令，但是这并不意味着一定比非托管代码运行慢，CLR的JIT编译器更加熟悉本机CPU，生成的指令优化好，并且对单一结果if判断优化。。。     </p></blockquote><blockquote><p>NGen.exe可以先将程序集编译成CPU指令保存到磁盘中，缺点是优化小。     </p></blockquote><blockquote><p>System.Runtime.ProfileOptimization类，该类导致CLR检查程序运行时哪些方法被JIT编译，结果被记录到一个文件中。程序再次启动时，如果在多CPU机器上运行，就用其他线程并发编译这些方法。  </p></blockquote><h4 id="1-4-1-IL和验证"><a href="#1-4-1-IL和验证" class="headerlink" title="1.4.1 IL和验证"></a>1.4.1 IL和验证</h4><blockquote><p>CLR会验证IL代码（参数、返回值、类型等等），包括验证不会不正确的访问内存，不会干扰另一个应用程序。    </p></blockquote><blockquote><p>CLR可以在一个进程运行多个程序，CLR也确实提供了此功能。  </p><ul><li>每个托管程序都在一个AppDomain中执行，有独立的地址。CLR宿主进程可以决定在一个进程运行多个AppDomain  </li></ul></blockquote><h4 id="1-4-2-不安全代码"><a href="#1-4-2-不安全代码" class="headerlink" title="1.4.2 不安全代码"></a>1.4.2 不安全代码</h4><blockquote><p>C#允许写不安全代码。不安全代码允许直接操作内存地址，并可操作这些地址的字节。  </p></blockquote><blockquote><p><strong>不安全代码</strong></p><ul><li>与非托管代码互操作  </li><li>提升对效率要求极高的算法性能    </li></ul></blockquote><blockquote><p>C#要求包含不安全代码的多有方法都用<code>unsafe</code>关键字标记   </p></blockquote><p><strong>IL的不安全性</strong></p><ul><li>容易反汇编，还原应用程序代码    <h3 id="8195-1-5-本机代码生成器：NGen-exe"><a href="#8195-1-5-本机代码生成器：NGen-exe" class="headerlink" title="&#8195; 1.5 本机代码生成器：NGen.exe"></a>&#8195; 1.5 本机代码生成器：NGen.exe</h3><blockquote><p>将IL代码编译成本机代码    </p></blockquote></li></ul><blockquote><p><strong>优点</strong>  </p><ul><li>提高应用程序的启动速度<br>已编译    </li><li>减小应用程序的工作集<br>将公共程序集单独保存，映射到所有引用的进程空间    </li></ul><p><strong>缺点</strong>  </p><ul><li>没有知识产权保护<br>需要同时发布IL和元数据程序集  </li><li>NGen生成的文件可能失去同步<br>电脑环境改变  </li><li>较差的执行时性能    </li></ul></blockquote><h3 id="8195-1-6-Framework类库"><a href="#8195-1-6-Framework类库" class="headerlink" title="&#8195; 1.6 Framework类库"></a>&#8195; 1.6 Framework类库</h3><blockquote><p>.NET Framework包含Framework类库(Framework Class Library,FCL)。  </p></blockquote><p><img alt data-src="/2020/09/22/NetCLRvia/1.1.6.png">  </p><h3 id="8195-1-7-通用类型系统"><a href="#8195-1-7-通用类型系统" class="headerlink" title="&#8195; 1.7 通用类型系统"></a>&#8195; 1.7 通用类型系统</h3><blockquote><p>Common Type System (CTS)    </p></blockquote><blockquote><h4 id="类型成员"><a href="#类型成员" class="headerlink" title="类型成员"></a>类型成员</h4><ul><li>字段(Field)</li><li>方法(Method)</li><li>属性(Property)</li><li>事件(Event)  </li></ul></blockquote><blockquote><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><ul><li>private</li><li>family(protected)</li><li>family and assembly(protected and internal)</li><li>assembly(internal)</li><li>family or assembly(protected internal) ：任何程序集的派生类型均可访问</li><li>public   </li></ul></blockquote><blockquote><h4 id="System-Object方法"><a href="#System-Object方法" class="headerlink" title="System.Object方法"></a>System.Object方法</h4><ul><li>比较两个实例的相等性</li><li>获取实例的哈希码</li><li>查询一个实例的真正类型</li><li>执行实例的浅拷贝</li><li>获取实例对象当前状态的字符串表示   </li></ul></blockquote><h3 id="8195-1-8-公共语言规范"><a href="#8195-1-8-公共语言规范" class="headerlink" title="&#8195; 1.8 公共语言规范"></a>&#8195; 1.8 公共语言规范</h3><blockquote><p>Common Language Specification(CLS)  </p></blockquote><blockquote><p>CLS 定义了所有语言都必须支持的最小功能集   </p></blockquote><ul><li>符合CLS的public或protected类型成员可以被其他语言使用  <blockquote><p><strong>特性</strong>：<code>[assembly: CLSCompliant(true)]</code><br>该特性标记的类型会检查是否符合CLS标准  </p></blockquote></li></ul><blockquote><p>类型编译之后只含字段和方法  </p></blockquote><h3 id="8195-1-9-与非托管代码的互操作性"><a href="#8195-1-9-与非托管代码的互操作性" class="headerlink" title="&#8195; 1.9 与非托管代码的互操作性"></a>&#8195; 1.9 与非托管代码的互操作性</h3><ul><li>托管代码能调用DLL中的非托管函数</li><li>托管代码可以使用现有COM组件</li><li>非托管代码可以使用托管类型<h2 id="8195-第2章-生成、打包、部署和管理应用程序及类型"><a href="#8195-第2章-生成、打包、部署和管理应用程序及类型" class="headerlink" title="&#8195;第2章 生成、打包、部署和管理应用程序及类型"></a>&#8195;第2章 生成、打包、部署和管理应用程序及类型</h2></li><li>.NET Framework 部署目标</li><li>将类型生成到模块中</li><li>元数据概述</li><li>将模块合并成程序集</li><li>程序集版本资源信息</li><li>语言文化</li><li>简单应用程序部署（私有部署的程序集）</li><li>简单管理控制（配置）  <h3 id="8195-2-1-NET-Framework-部署目标"><a href="#8195-2-1-NET-Framework-部署目标" class="headerlink" title="&#8195; 2.1 .NET Framework 部署目标"></a>&#8195; 2.1 .NET Framework 部署目标</h3><blockquote><ul><li>问题</li><li>不是所有组件都完美向后兼容</li><li>安装复杂</li><li>安全性。安装时有各种文件</li></ul></blockquote><h3 id="8195-2-2-将类型生成到模块中"><a href="#8195-2-2-将类型生成到模块中" class="headerlink" title="&#8195; 2.2 将类型生成到模块中"></a>&#8195; 2.2 将类型生成到模块中</h3><blockquote><p>编译时，自动检查源代码的所有引用并加载到最终的程序集中。  </p></blockquote><h3 id="8195-2-3-元数据概述"><a href="#8195-2-3-元数据概述" class="headerlink" title="&#8195; 2.3 元数据概述"></a>&#8195; 2.3 元数据概述</h3><blockquote><p>托管PE文件有4个部分：  </p><ul><li>PE头：Windows要求的标准信息</li><li>CLR头：小的信息块，CLR特有</li><li>元数据：3种表：定义表、引用表、清单表</li><li>IL代码  </li></ul></blockquote></li></ul><p><strong>元数据</strong><br><img alt data-src="/2020/09/22/NetCLRvia/2.2.1.png"><br><img alt data-src="/2020/09/22/NetCLRvia/2.2.2.png"><br><img alt data-src="/2020/09/22/NetCLRvia/2.2.3.png">    </p><blockquote><p>以上为部分定义表和引用表；清单表后面会讨论<br>这些表为元数据内的信息    </p></blockquote><h3 id="8195-2-4-将模块合并成程序集"><a href="#8195-2-4-将模块合并成程序集" class="headerlink" title="&#8195; 2.4 将模块合并成程序集"></a>&#8195; 2.4 将模块合并成程序集</h3><blockquote><p>清单表（元数据表）：记录构成程序集的所有文件及程序集的相关版本、公开的类型等所有信息。  </p></blockquote><blockquote><p>CLR操作的是程序集，首先加载包含“清单”的元数据表的文件  </p><ul><li>程序集定义了可重用的类型</li><li>程序集用了一个版本号标记</li><li>程序集可以关联安全信息   </li></ul></blockquote><blockquote><p>使用多文件程序集的三点理由  </p><ul><li>不同类型用不同的文件，是文件能以“增量”方式下载。另外，将类型划分到不同的文件中，可以对应用程序进行部分或分批打包/部署</li><li>可在程序集中添加资源或数据文件</li><li>程序集的各个类型可以用不同的编程语言来实现   </li></ul></blockquote><p><strong>清单元数据表</strong><br><img alt data-src="/2020/09/22/NetCLRvia/2.2.4.png">    </p><blockquote><p>清单使程序集具有自描述性   </p></blockquote><blockquote><p>C#编译器可以将.cs文件编译成程序集.dll（包含清单DLL PE文件），也可以编译成.netmodule（不含清单DLL PE文件）。<br>通过C#编译器在编译程序集时包含.netmodule文件，程序集清单中会包含该文件以及它的公共类型。  </p></blockquote><blockquote><p>生成程序集时要求用到的所有资源都在，但是CLR只有在调用方法时才加载所需文件。<br>所以可以将部分极少用到的资源放到网上，需要时再加载。  </p></blockquote><blockquote><p><strong>各种打包程序集的方法（略）</strong>  </p></blockquote><h3 id="8195-2-5-程序集版本资源信息"><a href="#8195-2-5-程序集版本资源信息" class="headerlink" title="&#8195; 2.5 程序集版本资源信息"></a>&#8195; 2.5 程序集版本资源信息</h3><blockquote><p>可以使用特性设置版本信息或者使用AL.exe开关  </p></blockquote><h4 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a>版本号</h4><ul><li>版本号格式<br><img alt data-src="/2020/09/22/NetCLRvia/2.2.5.png">     </li></ul><blockquote><p><strong>程序集的三个版本号</strong>  </p><ul><li>AssemblyFileVersion<br>存储在Win32版本资源中。CLR既不检查也不关心。Windows资源管理器中能看到。</li><li>AssemblyInformationalVersion<br>存储在Win32版本资源中。CLR既不检查也不关心。支出包含该程序集的产品的版本。 </li><li>AssemblyVersion<br>存储在AssemblyDef清单元数据表中。唯一性标识了程序集。很重要！  </li></ul></blockquote><h3 id="8195-2-6-语言文化"><a href="#8195-2-6-语言文化" class="headerlink" title="&#8195; 2.6 语言文化"></a>&#8195; 2.6 语言文化</h3><blockquote><p>建议创建单独的程序集，只在其中包含语言文化特有的资源——不要包含任何代码。标记了语言文化的程序集称为附属程序集。<br>一般不要生成引用了附属程序集的程序集，要访问附属程序集中的类型或成员，反射。  </p></blockquote><h3 id="8195-2-7-简单应用程序部署（私有部署的程序集）"><a href="#8195-2-7-简单应用程序部署（私有部署的程序集）" class="headerlink" title="&#8195; 2.7 简单应用程序部署（私有部署的程序集）"></a>&#8195; 2.7 简单应用程序部署（私有部署的程序集）</h3><blockquote><p>Ctrl+C  Ctrl+v</p></blockquote><h3 id="8195-2-8-简单管理控制（配置）"><a href="#8195-2-8-简单管理控制（配置）" class="headerlink" title="&#8195; 2.8 简单管理控制（配置）"></a>&#8195; 2.8 简单管理控制（配置）</h3><blockquote><p>配置文件(XML代码)<br>配置CLR检索子路径<code>&lt;probing Path=&quot;&quot; /&gt;</code><br>相关元素culture  </p></blockquote><h2 id="8195-第3章-共享程序集和强命名程序集"><a href="#8195-第3章-共享程序集和强命名程序集" class="headerlink" title="&#8195;第3章 共享程序集和强命名程序集"></a>&#8195;第3章 共享程序集和强命名程序集</h2><ul><li>两种程序集，两种部署</li><li>为程序集分配强名称</li><li>全局程序集缓存</li><li>在生成的程序集中引用强命名程序集</li><li>强命名程序集能防篡改</li><li>延迟签名</li><li>私有部署强命名程序集</li><li>“运行时”如何解析类型引用</li><li>高级管理控制（配置）  <h3 id="8195-3-1-两种程序集，两种部署"><a href="#8195-3-1-两种程序集，两种部署" class="headerlink" title="&#8195; 3.1 两种程序集，两种部署"></a>&#8195; 3.1 两种程序集，两种部署</h3></li></ul><blockquote><p><strong>两种程序集：</strong></p><ul><li>程序集<br> 只能以私有方式部署</li><li>强命名程序集(strongly named assembly)<br> 私有/全局部署均可<br>注：<br>私有部署：部署到应用程序基目录或者某个子目录<br>全局部署：部署到一些公认位置  </li></ul></blockquote><h3 id="8195-3-2-为程序集分配强名称"><a href="#8195-3-2-为程序集分配强名称" class="headerlink" title="&#8195; 3.2 为程序集分配强名称"></a>&#8195; 3.2 为程序集分配强名称</h3><blockquote><p>生成时加入公钥/私钥对。作为唯一标记，创建强命名程序集。<br>AssemblyDef表的Public Key字段保存完整公钥（很大）。<br>引用程序集时，AssemblyRef表存储公钥标记：8个字节。但是CLR匹配时用的是完整公钥。  </p></blockquote><h3 id="8195-3-8-“运行时”如何解析类型引用"><a href="#8195-3-8-“运行时”如何解析类型引用" class="headerlink" title="&#8195; 3.8 “运行时”如何解析类型引用"></a>&#8195; 3.8 “运行时”如何解析类型引用</h3><p><img alt data-src="/2020/09/22/NetCLRvia/3.3.8.png">    </p><h3 id="8195-3-9-高级管理控制（配置）"><a href="#8195-3-9-高级管理控制（配置）" class="headerlink" title="&#8195; 3.9  高级管理控制（配置）"></a>&#8195; 3.9  高级管理控制（配置）</h3><blockquote><p>控制加载程序集的位置、版本、是否重定向等。（配置XML文件元素值）</p></blockquote><h1 id="8194-第二部分"><a href="#8194-第二部分" class="headerlink" title="&#8194;第二部分"></a>&#8194;第二部分</h1><h2 id="8195-第4章-类型基础"><a href="#8195-第4章-类型基础" class="headerlink" title="&#8195;第4章 类型基础"></a>&#8195;第4章 类型基础</h2><ul><li>所有类型都从System.Object派生</li><li>类型转换</li><li>命名空间和程序集</li><li>运行时的相互关系<h3 id="8195-4-1-所有类型都从System-Object派生"><a href="#8195-4-1-所有类型都从System-Object派生" class="headerlink" title="&#8195; 4.1 所有类型都从System.Object派生"></a>&#8195; 4.1 所有类型都从System.Object派生</h3><blockquote><p>System.Object的公共方法  </p><ul><li>Equals ：如果两个对象具有相同的值，返回true。</li><li>GetHashCode ：返回对象的值的哈希码。</li><li>ToString ：默认返回类型的完整名称。</li><li>GetType ：返回从Type派生的一个类型的实例，指出调用GetType的对象的类型。  </li></ul></blockquote></li></ul><blockquote><p>System.Object的受保护方法  </p><ul><li>MemberwiseClone ：这个非虚方法创建类型的新实例，并将新对象的实例字段设与this对象的实例字段完全一致。返回对新实例的引用。  </li><li>Finalize ：在垃圾回收器判断对象应该作为垃圾被回收之后，在对象的内存被实际回收之前，会调用这个虚方法。需要在回收内存前执行清理工作的类型应重写该方法。  </li></ul></blockquote><blockquote><p>所有对象都用new操作符创建  </p><ol><li>计算类型及其所有基类型（直到Object）中定义的所有实例字段字节数。堆上每个对象都需要额外成员：“类型对象指针”和“同步块索引”。CLR利用这些成员管理对象。额外成员的字节数要计入对象大小。  </li><li>从托管堆中分配类型要求的字节数，从而分配对象的内存，分配的所有字节都设为零。  </li><li>初始化对象的“类型对象指针”和“同步块索引”成员。  </li><li>调用类型的实例构造器，传递在new调用中指定的实参。初始化该类型定义的实例字段。一直调到Object的构造器，初始化所有基类的字段，Object构造器什么都不做，简单的返回。<br>new执行上述操作后，返回指向新对象的引用。<br>对象不再被引用或访问时自动释放对象的内存。  </li></ol></blockquote><h3 id="8195-4-2-类型转换"><a href="#8195-4-2-类型转换" class="headerlink" title="&#8195; 4.2 类型转换"></a>&#8195; 4.2 类型转换</h3><blockquote><p>CLR最重要的特性之一就是类型安全。调用GetType方法即可知道对象的类型。<br>将对象转为它的基类型时，直接隐式转换。<br>将对象转换为它的派生类时，要求显示转换（可能失败）。<br>注：CLR检查转型操作时，确定总是转换为对象的实际类型或者它的任何基类型。  </p></blockquote><h4 id="使用C-的is和as操作符来转型"><a href="#使用C-的is和as操作符来转型" class="headerlink" title="使用C#的is和as操作符来转型"></a>使用C#的is和as操作符来转型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class Employee &#123;&#125;</span><br><span class="line">Object o = new Object();</span><br><span class="line">Boolean b1 = o is Object;   //b1 = true</span><br><span class="line">Boolean b2 = o is Employee; //b2 = false  </span><br><span class="line">Employee e = o as Employee; //as操作符返回对象或null</span><br></pre></td></tr></table></figure><h3 id="8195-4-3-命名空间和程序集"><a href="#8195-4-3-命名空间和程序集" class="headerlink" title="&#8195; 4.3 命名空间和程序集"></a>&#8195; 4.3 命名空间和程序集</h3><blockquote><p>命名空间：类型的文件夹</p></blockquote><h3 id="8195-4-3-运行时的相互关系"><a href="#8195-4-3-运行时的相互关系" class="headerlink" title="&#8195; 4.3 运行时的相互关系"></a>&#8195; 4.3 运行时的相互关系</h3><blockquote><p>栈、堆、值类型、引用类型的关系。<br>实例方法、虚方法、静态方法的调用。  </p></blockquote><h2 id="8195-第5章-基元类型、引用类型和值类型"><a href="#8195-第5章-基元类型、引用类型和值类型" class="headerlink" title="&#8195;第5章 基元类型、引用类型和值类型"></a>&#8195;第5章 基元类型、引用类型和值类型</h2><ul><li>编程语言的基元类型</li><li>引用类型和值类型</li><li>值类型的装箱和拆箱</li><li>对象哈希码</li><li>dynamic基元类型<h3 id="8195-5-1-编程语言的基元类型"><a href="#8195-5-1-编程语言的基元类型" class="headerlink" title="&#8195; 5.1 编程语言的基元类型"></a>&#8195; 5.1 编程语言的基元类型</h3><blockquote><p>编译器直接支持的数据类型称为基元类型(primitive type)。<br>C# int 映射到 System.Int32<br>C# long 映射到 System.Int64    </p></blockquote></li></ul><blockquote><p>关键字checked、unchecked捕获溢出异常。<br>尽量使用有符号类型，CLS不支持无符号类型。  </p></blockquote><h3 id="8195-5-2-引用类型和值类型"><a href="#8195-5-2-引用类型和值类型" class="headerlink" title="&#8195; 5.2 引用类型和值类型"></a>&#8195; 5.2 引用类型和值类型</h3><blockquote><p>引用类型的性能问题</p><ol><li>内存必须从托管堆分配。</li><li>堆上分配的每个对象都有一些额外成员，这些成员必须初始化。</li><li>对象中的其他字节（为字段而设）总是为零。</li><li>从托管堆分配对象时，可能强制执行一次垃圾回收。   </li></ol></blockquote><blockquote><p>派生链：System.Object –&gt; System.ValueType (派生所有值类型struct)–&gt;System.Enum (派生枚举)   </p></blockquote><blockquote><p>结构struct(值类型)  </p><ul><li>类型具有基元类型的行为</li><li>类型不需要从其他任何类型继承</li><li>类型也不派生出其他任何类型  </li><li>类型的实例较小（16字节 一个decimal,两个long/double）</li><li>类型的实例较大，但不作为方法实参传递，也不从方法返回。</li></ul></blockquote><blockquote><p>未装箱值类型不在堆上分配，一但定义了该类型的一个实例的方法不再活动就会被释放。  </p></blockquote><blockquote><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><p>命名空间：System.Runtime.InteropServices.StructLayoutAttribute<br>使用方式：<code>[StructLayout(LayoutKind.Auto)]</code><br>参数说明：<br>LayoutKind.Auto ：CLR自动排列字段顺序(类默认)<br>LayoutKind.Sequential ：CLR保持你的字段顺序(值类型默认(结构))<br>LayoutKind.Explicit ：利用偏移量显示排列字段  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Runtime.InteropServices;</span><br><span class="line">[StructLayout(LayoutKind.Explicit)]</span><br><span class="line">internal struct SomeType &#123;  //两个字段在该类型的实例中重叠</span><br><span class="line">    [FieldOffset(0)]</span><br><span class="line">    private readonly Byte m_b;</span><br><span class="line">    [FieldOffset(0)]</span><br><span class="line">    private readonly Int16 m_x; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8195-5-3-值类型的装箱和拆箱"><a href="#8195-5-3-值类型的装箱和拆箱" class="headerlink" title="&#8195; 5.3 值类型的装箱和拆箱"></a>&#8195; 5.3 值类型的装箱和拆箱</h3><blockquote><h4 id="装箱"><a href="#装箱" class="headerlink" title="装箱"></a>装箱</h4><ol><li>在托管堆中分配内存。值类型各字段内存加两个额外成员（类型对象指针和同步块索引）。  </li><li>值类型字段复制到新分配的堆内存。  </li><li>返回对象地址。    </li></ol></blockquote><blockquote><h4 id="拆箱"><a href="#拆箱" class="headerlink" title="拆箱"></a>拆箱</h4><ol><li>获取地址（拆箱）  </li><li>复制到栈中  </li></ol></blockquote><blockquote><p>拆箱成本远低于装箱  </p></blockquote><blockquote><h4 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h4><p><strong>装箱对性能影响很大,注意使用的方法参数是否引用类型，易产生隐式装箱。</strong><br><strong>注意调用的方法是否是基类中的方法，参数是否为引用类型。</strong>  </p></blockquote><h4 id="8195-5-3-1-使用接口更改已装箱值类型中的字段-以及为什么不应该这样做"><a href="#8195-5-3-1-使用接口更改已装箱值类型中的字段-以及为什么不应该这样做" class="headerlink" title="&#8195; 5.3.1 使用接口更改已装箱值类型中的字段(以及为什么不应该这样做)"></a>&#8195; 5.3.1 使用接口更改已装箱值类型中的字段(以及为什么不应该这样做)</h4><blockquote><p>注：值类型应该“不可变”。也就是说我们不应该定义任何会修改实例字段的成员。建议将值类型字段都标记为readonly。<br>FCL的核心值类型都是“不可变”的。  </p></blockquote><h4 id="8195-5-3-2-对象相等性和同一性"><a href="#8195-5-3-2-对象相等性和同一性" class="headerlink" title="&#8195; 5.3.2 对象相等性和同一性"></a>&#8195; 5.3.2 对象相等性和同一性</h4><blockquote><p>Object内部Equals方法实现同一性比较。<br>自定义值类型，相等性需要重写Equals方法。<br>比较两个对象的同一性请调用Object静态方法<code>ReferenceEquals(Object objA,Object objB)</code>   </p></blockquote><blockquote><p>如何重写Equals方法？ </p></blockquote><h3 id="8195-5-4-对象哈希码"><a href="#8195-5-4-对象哈希码" class="headerlink" title="&#8195; 5.4 对象哈希码"></a>&#8195; 5.4 对象哈希码</h3><blockquote><p>重写Equals方法就必须重写GetHashCode方法，两个对象必须具有相同哈希码才被视为相等。  </p></blockquote><blockquote><p>如何重写GetHashCode方法？   </p></blockquote><h3 id="8195-5-5-dynamic基元类型"><a href="#8195-5-5-dynamic基元类型" class="headerlink" title="&#8195; 5.5 dynamic基元类型"></a>&#8195; 5.5 dynamic基元类型</h3><blockquote><p>dynamic和var区别？</p></blockquote><h2 id="8195-第6章-类型和成员基础"><a href="#8195-第6章-类型和成员基础" class="headerlink" title="&#8195;第6章 类型和成员基础"></a>&#8195;第6章 类型和成员基础</h2><ul><li>类型的各种成员</li><li>类型的可见性</li><li>成员的可访问性</li><li>静态类</li><li>分布类、结构和接口</li><li>组件、多态和版本控制<h3 id="8195-6-1-类型的各种成员"><a href="#8195-6-1-类型的各种成员" class="headerlink" title="&#8195; 6.1 类型的各种成员"></a>&#8195; 6.1 类型的各种成员</h3><blockquote><p>类型中可以定义0个或多个以下种类的成员  </p><ul><li>常量 ：数据值恒定不变的符号</li><li>字段 ：数据值。字段可以是静态的：这种字段被认为是类型状态的一部分；字段可以是实例：这种字段被认为是对象状态的一部分。</li><li>实例构造器 ：将新对象的实例字段初始化的特殊方法。</li><li>类型构造器 ：将类型的静态字段初始化的特殊方法。</li><li>方法 ： 方法是更改或查询类型或对象状态的函数。作用于类型称为静态方法，作用于对象称为实例方法。方法通常要读写类型或对象的字段。</li><li>操作符重载 ： 本质是方法且不符合CLS。</li><li>转换操作符 ： 隐式或显式转换类型的方法且不符合CLS。</li><li>属性 ： 设置或查询字段。</li><li>事件 ： 向一个或多个静态或实例方法发送通知。  </li><li>类型 ： 其它嵌套类型   </li></ul></blockquote></li></ul><blockquote><p><strong>元数据是整个 Microsoft .NET Framework 开发平台的关键，它实现了编程语言、类型和对象的无缝集成。</strong>  </p></blockquote><h3 id="8195-6-2-类型可见性"><a href="#8195-6-2-类型可见性" class="headerlink" title="&#8195; 6.2 类型可见性"></a>&#8195; 6.2 类型可见性</h3><blockquote><p>public/internal 不指定默认internal<br>友元可见性  </p></blockquote><h3 id="8195-6-3-成员可访问性"><a href="#8195-6-3-成员可访问性" class="headerlink" title="&#8195; 6.3 成员可访问性"></a>&#8195; 6.3 成员可访问性</h3><p><img alt data-src="/2020/09/22/NetCLRvia/6.6.3.png">  </p><h3 id="8195-6-4-静态类"><a href="#8195-6-4-静态类" class="headerlink" title="&#8195; 6.4 静态类"></a>&#8195; 6.4 静态类</h3><blockquote><p>static：这种类唯一作用就是组合一组相关成员。不可实例化，且static不能修饰结构(值类型)。因为CLR总是语序值类型实例化。  </p></blockquote><blockquote><p>C#对静态类的限制：  </p><ul><li>必须从System.Object派生</li><li>不能实现任何接口</li><li>只能定义静态成员</li><li>不能作为字段、方法参数或局部变量使用。  </li></ul></blockquote><blockquote><p>静态类在元数据中被标记为abstract和sealed，抽象密封类。  </p></blockquote><h3 id="8195-6-5-分布类、结构和接口"><a href="#8195-6-5-分布类、结构和接口" class="headerlink" title="&#8195; 6.5 分布类、结构和接口"></a>&#8195; 6.5 分布类、结构和接口</h3><blockquote><p>partial  </p></blockquote><h3 id="8195-6-6-组件、多态和版本控制"><a href="#8195-6-6-组件、多态和版本控制" class="headerlink" title="&#8195; 6.6 组件、多态和版本控制"></a>&#8195; 6.6 组件、多态和版本控制</h3><blockquote><p><strong>面向对象编程</strong>(Object-Oriented Programming, OOP)<br><strong>组件软件编程</strong>(Component Software Programming, CSP)正是OOP发展到极致的成果。  </p><ul><li>组件(.NET Framework 称为程序集)有“已经发布”的意思。</li><li>组件有自己的标识(名称、版本、语言文化和公钥)。</li><li>组件永远维持自己的标识(程序集总是动态链接)。</li><li>组件清楚指明它所依赖的组件(引用元数据表)。</li><li>组件应编档它的类和成员。</li><li>组件必须指定它所需要的安全权限。</li><li>组件要发布在任何“维护版本”中都不会改变的接口。  </li></ul></blockquote><h4 id="8195-6-6-1-CLR如何调用虚方法、属性和事件"><a href="#8195-6-6-1-CLR如何调用虚方法、属性和事件" class="headerlink" title="&#8195; 6.6.1 CLR如何调用虚方法、属性和事件"></a>&#8195; 6.6.1 CLR如何调用虚方法、属性和事件</h4><blockquote><p>CLR 提供两个方法调用指令：  </p><ul><li>call    <pre><code>该IL指令可调用静态方法、实例方法和虚方法。  </code></pre></li><li>callvirt  <pre><code>该IL指令可调用实例方法和虚方法，不能调用静态方法。执行速度比call慢，检查null。  </code></pre></li></ul></blockquote><blockquote><p>类型设计：尽量减少虚方法数量。  </p></blockquote><h4 id="8195-6-6-2-合理使用类型的可见性和成员的可访问性"><a href="#8195-6-6-2-合理使用类型的可见性和成员的可访问性" class="headerlink" title="&#8195; 6.6.2 合理使用类型的可见性和成员的可访问性"></a>&#8195; 6.6.2 合理使用类型的可见性和成员的可访问性</h4><blockquote><p>定义类时遵循的原则    </p><ul><li>定义类时，除非确定要将其作为基类，并允许派生类对它进行特化，否则总是显式地指定为sealed类。</li><li>字段：private</li><li>方法、属性和事件：private和非虚 &gt;&gt; public &gt;&gt;  protected or internal &gt;&gt; virtual (过于依赖派生类)     </li><li>类型过于复杂可以嵌套类型。   </li></ul></blockquote><h4 id="8195-6-6-3-对类型进行版本控制时的虚方法的处理"><a href="#8195-6-6-3-对类型进行版本控制时的虚方法的处理" class="headerlink" title="&#8195; 6.6.3 对类型进行版本控制时的虚方法的处理"></a>&#8195; 6.6.3 对类型进行版本控制时的虚方法的处理</h4><h2 id="8195-第7章-常量和字段"><a href="#8195-第7章-常量和字段" class="headerlink" title="&#8195;第7章 常量和字段"></a>&#8195;第7章 常量和字段</h2><h3 id="8195-7-1-常量"><a href="#8195-7-1-常量" class="headerlink" title="&#8195; 7.1 常量"></a>&#8195; 7.1 常量</h3><blockquote><p><strong>常量</strong>是值从不变化的符号。<br>以下类型是基元类型，可用于定义常量：<br>Boolean, Char, Byte, SByte, Int16, UInt16, Int32, UInt32, Int64, UInt64, Single, Double, Decimal, String<br>C# 也允许定义非基元类型的常量变量，前提是把值设为null。  </p></blockquote><blockquote><p>如果希望在运行时从一个程序集中提取另一个程序集中的值，不该使用常量，而应该使用readonly字段。  </p></blockquote><h3 id="8195-7-2-字段"><a href="#8195-7-2-字段" class="headerlink" title="&#8195; 7.2 字段"></a>&#8195; 7.2 字段</h3><blockquote><p>字段是一种数据成员：值类型的实例或者引用类型的引用<br>CLR支持类型(静态)字段和实例(非静态)字段<br><img alt data-src="/2020/09/22/NetCLRvia/7.7.2.png"><br>volatile ： 易变    </p></blockquote><blockquote><p><strong>重要提示：</strong> 当某个字段是引用类型，并且该字段被标记为readonly时，不可改变的是引用，而非字段引用的对象。  </p></blockquote><h2 id="8195-第8章-方法"><a href="#8195-第8章-方法" class="headerlink" title="&#8195;第8章 方法"></a>&#8195;第8章 方法</h2><ul><li>实例构造器和类(引用类型)</li><li>实例构造器和结构(值类型)</li><li>类型构造器</li><li>操作符重载方法</li><li>转换操作符方法</li><li>扩展方法   </li><li>分部方法    <h3 id="8195-8-1-实例构造器和类-引用类型"><a href="#8195-8-1-实例构造器和类-引用类型" class="headerlink" title="&#8195; 8.1 实例构造器和类(引用类型)"></a>&#8195; 8.1 实例构造器和类(引用类型)</h3><blockquote><p>不要在构造器中调用虚方法<br>注意代码膨胀，定义字段时初始化，会在所有构造器中生成相同初始化代码，考虑使用this关键字。  </p></blockquote><h3 id="8195-8-2-实例构造器和结构-值类型"><a href="#8195-8-2-实例构造器和结构-值类型" class="headerlink" title="&#8195; 8.2 实例构造器和结构(值类型)"></a>&#8195; 8.2 实例构造器和结构(值类型)</h3><blockquote><p>C#不允许为值类型定义无参构造器。<br>值类型需要显示初始化。<br>值类型中构造器需要初始化值类型的所有字段。  </p></blockquote><h3 id="8195-8-3-类型构造器"><a href="#8195-8-3-类型构造器" class="headerlink" title="&#8195; 8.3 类型构造器"></a>&#8195; 8.3 类型构造器</h3><blockquote><p>值类型可以定义类型构造器(静态构造器)，但是永远别这么做，CLR并不一定调用。<br>类型构造器语法：<code>static Class(){}</code>，不需要修饰符且无参，默认private，加修饰符报错。<br>只有CLR会调用类型构造器，且会用互斥线程同步锁，确保类型构造器只执行一次。<br>类型构造器非常适合初始化任何单实例对象。  </p></blockquote></li></ul><blockquote><p>在AppDomain卸载时，类型对象才会回收。<br>在AppDomain卸载时执行一些代码，可向System.AppDomain类型的DomainUnload事件登记一个回调方法。  </p></blockquote><h3 id="8195-8-4-操作符重载方法"><a href="#8195-8-4-操作符重载方法" class="headerlink" title="&#8195; 8.4 操作符重载方法"></a>&#8195; 8.4 操作符重载方法</h3><h3 id="8195-8-5-转换操作符方法"><a href="#8195-8-5-转换操作符方法" class="headerlink" title="&#8195; 8.5 转换操作符方法"></a>&#8195; 8.5 转换操作符方法</h3><blockquote><p>这两个方法可以查看System.Decimal类型代码  </p></blockquote><h3 id="8195-8-6-扩展方法"><a href="#8195-8-6-扩展方法" class="headerlink" title="&#8195; 8.6 扩展方法"></a>&#8195; 8.6 扩展方法</h3><pre><code>public static class StringBuilderExtensions {    public static Int32 IndexOf(this StringBuilder sb, Char value) {        for (Int32 index = 0; index &lt; sb.Length; index++)            if (sb[index] == value) return index;        return -1;    }}</code></pre><h4 id="8195-8-6-1-规则和原则"><a href="#8195-8-6-1-规则和原则" class="headerlink" title="&#8195; 8.6.1 规则和原则"></a>&#8195; 8.6.1 规则和原则</h4><blockquote><ul><li>C#只支持扩展方法，不支持扩展属性、扩展事件、扩展操作符等。</li><li>扩展方法必须在非泛型的静态类中声明。类名无限制。扩展方法至少有一个参数，且第一个参数用this。(第一个参数为待扩展类型)</li><li>静态类必须具有文件作用域，不能嵌套在类中。</li><li>谨慎使用，不要扩展Object。  </li></ul></blockquote><h4 id="8195-8-6-2-用扩展方法扩展各种类型"><a href="#8195-8-6-2-用扩展方法扩展各种类型" class="headerlink" title="&#8195; 8.6.2 用扩展方法扩展各种类型"></a>&#8195; 8.6.2 用扩展方法扩展各种类型</h4><blockquote><p>扩展接口、委托和枚举。<br>接口类实例：System.Linq.Enumerable</p></blockquote><h4 id="8195-8-6-3-ExtensionAttribute类"><a href="#8195-8-6-3-ExtensionAttribute类" class="headerlink" title="&#8195; 8.6.3 ExtensionAttribute类"></a>&#8195; 8.6.3 ExtensionAttribute类</h4><blockquote><p>扩展方法会自动添加此特性，方便CLR元数据检索。</p></blockquote><h3 id="8195-8-7-分部方法"><a href="#8195-8-7-分部方法" class="headerlink" title="&#8195; 8.7 分部方法"></a>&#8195; 8.7 分部方法</h3><h2 id="8195-第9章-参数"><a href="#8195-第9章-参数" class="headerlink" title="&#8195;第9章 参数"></a>&#8195;第9章 参数</h2><h3 id="8195-9-1-可选参数和命名参数"><a href="#8195-9-1-可选参数和命名参数" class="headerlink" title="&#8195; 9.1 可选参数和命名参数"></a>&#8195; 9.1 可选参数和命名参数</h3><h4 id="8195-9-1-1-规则和原则"><a href="#8195-9-1-1-规则和原则" class="headerlink" title="&#8195; 9.1.1 规则和原则"></a>&#8195; 9.1.1 规则和原则</h4><h4 id="8195-9-1-2-DefaultParameterValueAttribute和OptionalAttribute"><a href="#8195-9-1-2-DefaultParameterValueAttribute和OptionalAttribute" class="headerlink" title="&#8195; 9.1.2 DefaultParameterValueAttribute和OptionalAttribute"></a>&#8195; 9.1.2 DefaultParameterValueAttribute和OptionalAttribute</h4><h3 id="8195-9-2-隐式类型的局部变量"><a href="#8195-9-2-隐式类型的局部变量" class="headerlink" title="&#8195; 9.2 隐式类型的局部变量"></a>&#8195; 9.2 隐式类型的局部变量</h3><h3 id="8195-9-3-以传引用的方式向方法传递参数"><a href="#8195-9-3-以传引用的方式向方法传递参数" class="headerlink" title="&#8195; 9.3 以传引用的方式向方法传递参数"></a>&#8195; 9.3 以传引用的方式向方法传递参数</h3><h3 id="8195-9-4-向方法传递可变数量的参数"><a href="#8195-9-4-向方法传递可变数量的参数" class="headerlink" title="&#8195; 9.4 向方法传递可变数量的参数"></a>&#8195; 9.4 向方法传递可变数量的参数</h3><h3 id="8195-9-5-参数和返回类型的设计规范"><a href="#8195-9-5-参数和返回类型的设计规范" class="headerlink" title="&#8195; 9.5 参数和返回类型的设计规范"></a>&#8195; 9.5 参数和返回类型的设计规范</h3><h3 id="8195-9-6-常量性"><a href="#8195-9-6-常量性" class="headerlink" title="&#8195; 9.6 常量性"></a>&#8195; 9.6 常量性</h3><h2 id="8195-第10章-属性"><a href="#8195-第10章-属性" class="headerlink" title="&#8195;第10章 属性"></a>&#8195;第10章 属性</h2><h3 id="8195-10-1-无参属性"><a href="#8195-10-1-无参属性" class="headerlink" title="&#8195; 10.1 无参属性"></a>&#8195; 10.1 无参属性</h3><h4 id="8195-10-1-1-自动实现的属性"><a href="#8195-10-1-1-自动实现的属性" class="headerlink" title="&#8195; 10.1.1 自动实现的属性"></a>&#8195; 10.1.1 自动实现的属性</h4><h4 id="8195-10-1-2-合理定义属性"><a href="#8195-10-1-2-合理定义属性" class="headerlink" title="&#8195; 10.1.2 合理定义属性"></a>&#8195; 10.1.2 合理定义属性</h4><h4 id="8195-10-1-3-对象和集合初始化器"><a href="#8195-10-1-3-对象和集合初始化器" class="headerlink" title="&#8195; 10.1.3 对象和集合初始化器"></a>&#8195; 10.1.3 对象和集合初始化器</h4><h4 id="8195-10-1-4-匿名类型"><a href="#8195-10-1-4-匿名类型" class="headerlink" title="&#8195; 10.1.4 匿名类型"></a>&#8195; 10.1.4 匿名类型</h4><h4 id="8195-10-1-5-System-Tuple类型"><a href="#8195-10-1-5-System-Tuple类型" class="headerlink" title="&#8195; 10.1.5 System.Tuple类型"></a>&#8195; 10.1.5 System.Tuple类型</h4><h3 id="8195-10-2-有参属性"><a href="#8195-10-2-有参属性" class="headerlink" title="&#8195; 10.2 有参属性"></a>&#8195; 10.2 有参属性</h3><h3 id="8195-10-3-调用属性访问器方法时的性能"><a href="#8195-10-3-调用属性访问器方法时的性能" class="headerlink" title="&#8195; 10.3 调用属性访问器方法时的性能"></a>&#8195; 10.3 调用属性访问器方法时的性能</h3><h3 id="8195-10-4-属性访问器的可访问性"><a href="#8195-10-4-属性访问器的可访问性" class="headerlink" title="&#8195; 10.4 属性访问器的可访问性"></a>&#8195; 10.4 属性访问器的可访问性</h3><h3 id="8195-10-5-泛型属性访问器方法"><a href="#8195-10-5-泛型属性访问器方法" class="headerlink" title="&#8195; 10.5 泛型属性访问器方法"></a>&#8195; 10.5 泛型属性访问器方法</h3><h2 id="8195-第11章-事件"><a href="#8195-第11章-事件" class="headerlink" title="&#8195;第11章 事件"></a>&#8195;第11章 事件</h2><h3 id="8195-11-1-设计要公开事件的类型"><a href="#8195-11-1-设计要公开事件的类型" class="headerlink" title="&#8195; 11.1 设计要公开事件的类型"></a>&#8195; 11.1 设计要公开事件的类型</h3><h4 id="8195-11-1-1-第一步：定义类型来容纳所有需要发送给时间通知接收者的附加信息"><a href="#8195-11-1-1-第一步：定义类型来容纳所有需要发送给时间通知接收者的附加信息" class="headerlink" title="&#8195; 11.1.1 第一步：定义类型来容纳所有需要发送给时间通知接收者的附加信息"></a>&#8195; 11.1.1 第一步：定义类型来容纳所有需要发送给时间通知接收者的附加信息</h4><h4 id="8195-11-1-2-第二步：定义事件成员"><a href="#8195-11-1-2-第二步：定义事件成员" class="headerlink" title="&#8195; 11.1.2 第二步：定义事件成员"></a>&#8195; 11.1.2 第二步：定义事件成员</h4><h4 id="8195-11-1-3-第三步：定义负责引发事件的方法来通知事件的登记对象"><a href="#8195-11-1-3-第三步：定义负责引发事件的方法来通知事件的登记对象" class="headerlink" title="&#8195; 11.1.3 第三步：定义负责引发事件的方法来通知事件的登记对象"></a>&#8195; 11.1.3 第三步：定义负责引发事件的方法来通知事件的登记对象</h4><h4 id="8195-11-1-4-第四步：定义方法将输入转化为期望事件"><a href="#8195-11-1-4-第四步：定义方法将输入转化为期望事件" class="headerlink" title="&#8195; 11.1.4 第四步：定义方法将输入转化为期望事件"></a>&#8195; 11.1.4 第四步：定义方法将输入转化为期望事件</h4><h3 id="8195-11-2-编译器如何实现事件"><a href="#8195-11-2-编译器如何实现事件" class="headerlink" title="&#8195; 11.2 编译器如何实现事件"></a>&#8195; 11.2 编译器如何实现事件</h3><h3 id="8195-11-3-设计侦听事件的类型"><a href="#8195-11-3-设计侦听事件的类型" class="headerlink" title="&#8195; 11.3 设计侦听事件的类型"></a>&#8195; 11.3 设计侦听事件的类型</h3><h3 id="8195-11-4-显式实现事件"><a href="#8195-11-4-显式实现事件" class="headerlink" title="&#8195; 11.4 显式实现事件"></a>&#8195; 11.4 显式实现事件</h3><h2 id="8195-第12章-泛型"><a href="#8195-第12章-泛型" class="headerlink" title="&#8195;第12章 泛型"></a>&#8195;第12章 泛型</h2><h3 id="8195-12-1-FCL中的泛型"><a href="#8195-12-1-FCL中的泛型" class="headerlink" title="&#8195; 12.1 FCL中的泛型"></a>&#8195; 12.1 FCL中的泛型</h3><h3 id="8195-12-2-泛型基础结构"><a href="#8195-12-2-泛型基础结构" class="headerlink" title="&#8195; 12.2 泛型基础结构"></a>&#8195; 12.2 泛型基础结构</h3><h4 id="8195-12-2-1-开放类型和封闭类型"><a href="#8195-12-2-1-开放类型和封闭类型" class="headerlink" title="&#8195; 12.2.1 开放类型和封闭类型"></a>&#8195; 12.2.1 开放类型和封闭类型</h4><h4 id="8195-12-2-2-泛型类型和继承"><a href="#8195-12-2-2-泛型类型和继承" class="headerlink" title="&#8195; 12.2.2 泛型类型和继承"></a>&#8195; 12.2.2 泛型类型和继承</h4><h4 id="8195-12-2-3-泛型类型同一性"><a href="#8195-12-2-3-泛型类型同一性" class="headerlink" title="&#8195; 12.2.3 泛型类型同一性"></a>&#8195; 12.2.3 泛型类型同一性</h4><h4 id="8195-12-2-4-代码爆炸"><a href="#8195-12-2-4-代码爆炸" class="headerlink" title="&#8195; 12.2.4 代码爆炸"></a>&#8195; 12.2.4 代码爆炸</h4><h3 id="8195-12-3-泛型接口"><a href="#8195-12-3-泛型接口" class="headerlink" title="&#8195; 12.3 泛型接口"></a>&#8195; 12.3 泛型接口</h3><h3 id="8195-12-4-泛型委托"><a href="#8195-12-4-泛型委托" class="headerlink" title="&#8195; 12.4 泛型委托"></a>&#8195; 12.4 泛型委托</h3><h3 id="8195-12-5-委托和接口的逆变和协变泛型类型实参"><a href="#8195-12-5-委托和接口的逆变和协变泛型类型实参" class="headerlink" title="&#8195; 12.5 委托和接口的逆变和协变泛型类型实参"></a>&#8195; 12.5 委托和接口的逆变和协变泛型类型实参</h3><h3 id="8195-12-6-泛型方法"><a href="#8195-12-6-泛型方法" class="headerlink" title="&#8195; 12.6 泛型方法"></a>&#8195; 12.6 泛型方法</h3><h3 id="8195-12-7-泛型和其他成员"><a href="#8195-12-7-泛型和其他成员" class="headerlink" title="&#8195; 12.7 泛型和其他成员"></a>&#8195; 12.7 泛型和其他成员</h3><h3 id="8195-12-8-可验证性和约束"><a href="#8195-12-8-可验证性和约束" class="headerlink" title="&#8195; 12.8 可验证性和约束"></a>&#8195; 12.8 可验证性和约束</h3><h4 id="8195-12-8-1-主要约束"><a href="#8195-12-8-1-主要约束" class="headerlink" title="&#8195; 12.8.1 主要约束"></a>&#8195; 12.8.1 主要约束</h4><h4 id="8195-12-8-2-次要约束"><a href="#8195-12-8-2-次要约束" class="headerlink" title="&#8195; 12.8.2 次要约束"></a>&#8195; 12.8.2 次要约束</h4><h4 id="8195-12-8-3-构造器约束"><a href="#8195-12-8-3-构造器约束" class="headerlink" title="&#8195; 12.8.3 构造器约束"></a>&#8195; 12.8.3 构造器约束</h4><h4 id="8195-12-8-4-其他可验证性问题"><a href="#8195-12-8-4-其他可验证性问题" class="headerlink" title="&#8195; 12.8.4 其他可验证性问题"></a>&#8195; 12.8.4 其他可验证性问题</h4><h2 id="8195-第13章-接口"><a href="#8195-第13章-接口" class="headerlink" title="&#8195;第13章 接口"></a>&#8195;第13章 接口</h2><h3 id="8195-13-1-类和接口继承"><a href="#8195-13-1-类和接口继承" class="headerlink" title="&#8195; 13.1 类和接口继承"></a>&#8195; 13.1 类和接口继承</h3><h3 id="8195-13-2-定义接口"><a href="#8195-13-2-定义接口" class="headerlink" title="&#8195; 13.2 定义接口"></a>&#8195; 13.2 定义接口</h3><h3 id="8195-13-3-继承接口"><a href="#8195-13-3-继承接口" class="headerlink" title="&#8195; 13.3 继承接口"></a>&#8195; 13.3 继承接口</h3><h3 id="8195-13-4-关于调用接口方法的更多探讨"><a href="#8195-13-4-关于调用接口方法的更多探讨" class="headerlink" title="&#8195; 13.4 关于调用接口方法的更多探讨"></a>&#8195; 13.4 关于调用接口方法的更多探讨</h3><h3 id="8195-13-5-隐式和显式接口方法实现-幕后发生的事情"><a href="#8195-13-5-隐式和显式接口方法实现-幕后发生的事情" class="headerlink" title="&#8195; 13.5 隐式和显式接口方法实现(幕后发生的事情)"></a>&#8195; 13.5 隐式和显式接口方法实现(幕后发生的事情)</h3><h3 id="8195-13-6-泛型接口"><a href="#8195-13-6-泛型接口" class="headerlink" title="&#8195; 13.6 泛型接口"></a>&#8195; 13.6 泛型接口</h3><h3 id="8195-13-7-泛型和接口约束"><a href="#8195-13-7-泛型和接口约束" class="headerlink" title="&#8195; 13.7 泛型和接口约束"></a>&#8195; 13.7 泛型和接口约束</h3><h3 id="8195-13-8-实现多个具有相同方法名和签名的接口"><a href="#8195-13-8-实现多个具有相同方法名和签名的接口" class="headerlink" title="&#8195; 13.8 实现多个具有相同方法名和签名的接口"></a>&#8195; 13.8 实现多个具有相同方法名和签名的接口</h3><h3 id="8195-13-9-用显式接口方法实现来增强编译时类型安全性"><a href="#8195-13-9-用显式接口方法实现来增强编译时类型安全性" class="headerlink" title="&#8195; 13.9 用显式接口方法实现来增强编译时类型安全性"></a>&#8195; 13.9 用显式接口方法实现来增强编译时类型安全性</h3><h3 id="8195-13-10-谨慎使用显式接口方法实现"><a href="#8195-13-10-谨慎使用显式接口方法实现" class="headerlink" title="&#8195; 13.10 谨慎使用显式接口方法实现"></a>&#8195; 13.10 谨慎使用显式接口方法实现</h3><h3 id="8195-13-11-设计：基类还是接口"><a href="#8195-13-11-设计：基类还是接口" class="headerlink" title="&#8195; 13.11 设计：基类还是接口"></a>&#8195; 13.11 设计：基类还是接口</h3><h1 id="8194-第三部分-基本类型"><a href="#8194-第三部分-基本类型" class="headerlink" title="&#8194;第三部分 基本类型"></a>&#8194;第三部分 基本类型</h1><h2 id="8195-第14章-字符、字符串和文本处理"><a href="#8195-第14章-字符、字符串和文本处理" class="headerlink" title="&#8195;第14章 字符、字符串和文本处理"></a>&#8195;第14章 字符、字符串和文本处理</h2><h3 id="8195-14-1-字符"><a href="#8195-14-1-字符" class="headerlink" title="&#8195; 14.1 字符"></a>&#8195; 14.1 字符</h3><h3 id="8195-14-2-System-String类型"><a href="#8195-14-2-System-String类型" class="headerlink" title="&#8195; 14.2 System.String类型"></a>&#8195; 14.2 System.String类型</h3><h4 id="8195-14-2-1-构造字符串"><a href="#8195-14-2-1-构造字符串" class="headerlink" title="&#8195; 14.2.1 构造字符串"></a>&#8195; 14.2.1 构造字符串</h4><h4 id="8195-14-2-2-字符串是不可变的"><a href="#8195-14-2-2-字符串是不可变的" class="headerlink" title="&#8195; 14.2.2 字符串是不可变的"></a>&#8195; 14.2.2 字符串是不可变的</h4><h4 id="8195-14-2-3-比较字符串"><a href="#8195-14-2-3-比较字符串" class="headerlink" title="&#8195; 14.2.3 比较字符串"></a>&#8195; 14.2.3 比较字符串</h4><h4 id="8195-14-2-4-字符串留用"><a href="#8195-14-2-4-字符串留用" class="headerlink" title="&#8195; 14.2.4 字符串留用"></a>&#8195; 14.2.4 字符串留用</h4><h4 id="8195-14-2-5-字符串池"><a href="#8195-14-2-5-字符串池" class="headerlink" title="&#8195; 14.2.5 字符串池"></a>&#8195; 14.2.5 字符串池</h4><h4 id="8195-14-2-6-检查字符串中的字符和文本元素"><a href="#8195-14-2-6-检查字符串中的字符和文本元素" class="headerlink" title="&#8195; 14.2.6 检查字符串中的字符和文本元素"></a>&#8195; 14.2.6 检查字符串中的字符和文本元素</h4><h4 id="8195-14-2-7-其它字符串操作"><a href="#8195-14-2-7-其它字符串操作" class="headerlink" title="&#8195; 14.2.7  其它字符串操作"></a>&#8195; 14.2.7  其它字符串操作</h4><h3 id="8195-14-3-高效率构造字符串"><a href="#8195-14-3-高效率构造字符串" class="headerlink" title="&#8195; 14.3 高效率构造字符串"></a>&#8195; 14.3 高效率构造字符串</h3><h3 id="8195-14-4-获取对象的字符串表示：Tostring"><a href="#8195-14-4-获取对象的字符串表示：Tostring" class="headerlink" title="&#8195; 14.4 获取对象的字符串表示：Tostring"></a>&#8195; 14.4 获取对象的字符串表示：Tostring</h3><h3 id="8195-14-5-解析字符串来获取对象：Parse"><a href="#8195-14-5-解析字符串来获取对象：Parse" class="headerlink" title="&#8195; 14.5 解析字符串来获取对象：Parse"></a>&#8195; 14.5 解析字符串来获取对象：Parse</h3><h3 id="8195-14-6-编码：字符和字节的相互转换"><a href="#8195-14-6-编码：字符和字节的相互转换" class="headerlink" title="&#8195; 14.6 编码：字符和字节的相互转换"></a>&#8195; 14.6 编码：字符和字节的相互转换</h3><h3 id="8195-14-7-安全字符串"><a href="#8195-14-7-安全字符串" class="headerlink" title="&#8195; 14.7 安全字符串"></a>&#8195; 14.7 安全字符串</h3><h3 id="8195-14-8"><a href="#8195-14-8" class="headerlink" title="&#8195; 14.8"></a>&#8195; 14.8</h3><h2 id="8195-第15章-枚举类型和位标志"><a href="#8195-第15章-枚举类型和位标志" class="headerlink" title="&#8195;第15章 枚举类型和位标志"></a>&#8195;第15章 枚举类型和位标志</h2><h2 id="8195-第16章-数组"><a href="#8195-第16章-数组" class="headerlink" title="&#8195;第16章 数组"></a>&#8195;第16章 数组</h2><h2 id="8195-第17章-委托"><a href="#8195-第17章-委托" class="headerlink" title="&#8195;第17章 委托"></a>&#8195;第17章 委托</h2><h2 id="8195-第18章-定制特性"><a href="#8195-第18章-定制特性" class="headerlink" title="&#8195;第18章 定制特性"></a>&#8195;第18章 定制特性</h2><h2 id="8195-第19章-可空值类型"><a href="#8195-第19章-可空值类型" class="headerlink" title="&#8195;第19章 可空值类型"></a>&#8195;第19章 可空值类型</h2><h1 id="8194-第四部分-核心机制"><a href="#8194-第四部分-核心机制" class="headerlink" title="&#8194;第四部分 核心机制"></a>&#8194;第四部分 核心机制</h1><h2 id="8195-第20章-异常和状态管理"><a href="#8195-第20章-异常和状态管理" class="headerlink" title="&#8195;第20章 异常和状态管理"></a>&#8195;第20章 异常和状态管理</h2><h2 id="8195-第21章-托管堆和垃圾回收"><a href="#8195-第21章-托管堆和垃圾回收" class="headerlink" title="&#8195;第21章 托管堆和垃圾回收"></a>&#8195;第21章 托管堆和垃圾回收</h2><h2 id="8195-第22章-CLR寄宿和AppDomain"><a href="#8195-第22章-CLR寄宿和AppDomain" class="headerlink" title="&#8195;第22章 CLR寄宿和AppDomain"></a>&#8195;第22章 CLR寄宿和AppDomain</h2><h2 id="8195-第23章-程序及加载和反射"><a href="#8195-第23章-程序及加载和反射" class="headerlink" title="&#8195;第23章 程序及加载和反射"></a>&#8195;第23章 程序及加载和反射</h2><h2 id="8195-第24章-运行时序列化"><a href="#8195-第24章-运行时序列化" class="headerlink" title="&#8195;第24章 运行时序列化"></a>&#8195;第24章 运行时序列化</h2><h2 id="8195-第25章-与WinRT组件互操作"><a href="#8195-第25章-与WinRT组件互操作" class="headerlink" title="&#8195;第25章 与WinRT组件互操作"></a>&#8195;第25章 与WinRT组件互操作</h2><h1 id="8194-第五部分-线程处理"><a href="#8194-第五部分-线程处理" class="headerlink" title="&#8194;第五部分 线程处理"></a>&#8194;第五部分 线程处理</h1><h2 id="8195-第26章-线程基础"><a href="#8195-第26章-线程基础" class="headerlink" title="&#8195;第26章 线程基础"></a>&#8195;第26章 线程基础</h2><h2 id="8195-第27章-计算限制的异步操作"><a href="#8195-第27章-计算限制的异步操作" class="headerlink" title="&#8195;第27章 计算限制的异步操作"></a>&#8195;第27章 计算限制的异步操作</h2><h2 id="8195-第28章-I-O限制的异步操作"><a href="#8195-第28章-I-O限制的异步操作" class="headerlink" title="&#8195;第28章 I/O限制的异步操作"></a>&#8195;第28章 I/O限制的异步操作</h2><h2 id="8195-第29章-基元线程同步构造"><a href="#8195-第29章-基元线程同步构造" class="headerlink" title="&#8195;第29章 基元线程同步构造"></a>&#8195;第29章 基元线程同步构造</h2><h2 id="8195-第30章-混合线程同步构造"><a href="#8195-第30章-混合线程同步构造" class="headerlink" title="&#8195;第30章 混合线程同步构造"></a>&#8195;第30章 混合线程同步构造</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;8194-概述&quot;&gt;&lt;a href=&quot;#8194-概述&quot; class=&quot;headerlink&quot; title=&quot;&amp;#8194;概述&quot;&gt;&lt;/a&gt;&amp;#8194;概述&lt;/h1&gt;&lt;p&gt;&amp;#8195;&lt;strong&gt;C#编程基础，CLR学习记录&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Plsql远程或本地登录Oracle</title>
    <link href="http://yoursite.com/2019/12/16/PlsqlLoginOracle/"/>
    <id>http://yoursite.com/2019/12/16/PlsqlLoginOracle/</id>
    <published>2019-12-16T10:02:04.000Z</published>
    <updated>2019-12-20T09:21:04.093Z</updated>
    
    <content type="html"><![CDATA[<p>&#8195;关于plsql远程登录Oracle的相关配置，本机不用安装Oracle。本机有的也可配置连接。<br>&#8195;如有问题，欢迎留言。  </p><a id="more"></a>       <p>&#8195;注：所要连接的Oracle，本文简称：远库；如果你连本地数据库，我也暂时用远库指代。</p><h1 id="8194-条件"><a href="#8194-条件" class="headerlink" title="&#8194;条件"></a>&#8194;条件</h1><ul><li>官方文件instantclient_11_2，请到官网下载。  </li><li>plsql登录程序。</li><li>tnsnames.ora文件</li></ul><h1 id="8194-tnsnames-ora文件"><a href="#8194-tnsnames-ora文件" class="headerlink" title="&#8194;tnsnames.ora文件"></a>&#8194;tnsnames.ora文件</h1><p>&#8195;本机连数据库：将C:\app\product\11.2.0\dbhome_1\NETWORK\ADMIN下的tnsnames.ora和listener.ora都复制到instantclient_11_2里。（远程连接的忽略此步骤）<br>&#8195;我就随一个路径：C:\app\product\plsqldev\instantclient_11_2，一般都放到instantclient_11_2里。<br>&#8195;新建文件tnsnames.ora，若已有此文件，就新增一个用户。<br>&#8195;内容如下：  </p><pre><code class="CSS">Database =        (DESCRIPTION =    (ADDRESS_LIST =      (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.1.1)(PORT = 1521))    )    (CONNECT_DATA =      (SERVICE_NAME = orcl)    )  )  </code></pre><ul><li>Database是登录远库时Database框里填的内容。（例1：Test ；例2：10.230.22.33:11521/aabbccdd）    </li><li>HOST是远库主机IP。</li><li>SERVICE_NAME是远库的库名，一般安装时默认为：orcl，如果你改了，希望你记得。  </li><li>这三个值改成你自己的，第一个建议复制粘贴覆盖掉Database。 </li></ul><h1 id="8194-路径配置"><a href="#8194-路径配置" class="headerlink" title="&#8194;路径配置"></a>&#8194;路径配置</h1><h2 id="8194-系统变量"><a href="#8194-系统变量" class="headerlink" title="&#8194;系统变量"></a>&#8194;系统变量</h2><p>&#8195;Win10打开方式：此电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量-&gt;系统变量<br>&#8195;变量名：TNS_ADMIN<br>&#8195;变量值：C:\app\product\plsqldev\instantclient_11_2<br>&#8195;说明：变量值是tnsnames.ora所在路径。  </p><h2 id="8194-plsql配置"><a href="#8194-plsql配置" class="headerlink" title="&#8194;plsql配置"></a>&#8194;plsql配置</h2><ol><li>双击登录程序打开登录界面，单机Cancel(取消)直接无用户登录。  </li><li>Tools-&gt;Preferences,看到最下面一个框名为：OCI library。  </li><li>值为：C:\app\product\plsqldev\instantclient_11_2\oci.dll  </li><li>点击Apply-&gt;OK，退出重新登录，以你的用户身份登录即可。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#8195;关于plsql远程登录Oracle的相关配置，本机不用安装Oracle。本机有的也可配置连接。&lt;br&gt;&amp;#8195;如有问题，欢迎留言。  &lt;/p&gt;
    
    </summary>
    
    
      <category term="Oracle" scheme="http://yoursite.com/categories/Oracle/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>注释</title>
    <link href="http://yoursite.com/2019/12/09/CommentNotes/"/>
    <id>http://yoursite.com/2019/12/09/CommentNotes/</id>
    <published>2019-12-09T09:03:54.000Z</published>
    <updated>2019-12-09T10:02:19.268Z</updated>
    
    <content type="html"><![CDATA[<p>&#8195;<strong>注释相关的知识（简要）</strong>  </p><a id="more"></a><h1 id="8194-常用标识"><a href="#8194-常用标识" class="headerlink" title="&#8194;常用标识"></a>&#8194;常用标识</h1><pre><code class="C#"><span class="comment">//<span class="doctag">TODO:</span>未做的事（提醒别人完成）</span><span class="comment">//<span class="doctag">FIXME:</span>已知的问题（告知别人）</span><span class="comment">//HACK:粗糙的方案、代码（提醒别人完善）</span><span class="comment">//<span class="doctag">XXX:</span>危险！（严重问题）</span></code></pre><p>&#8195;依次打开：工具-&gt;选项-&gt;环境-&gt;任务列表，按下图所示，3步添加标识。<br>&#8195;(英文路径)Steps:Tools-&gt;Options-&gt;Environment-&gt;Task List<br>&#8195;一般将FIXME、XXX置为高（!High）。</p><div align="center"><img width="744" height="487" data-src="/2019/12/09/CommentNotes/1.png"></div>  &#8195;快捷键： Ctrl + \ + T,打开任务列表。或者：视图->任务列表。  <div align="center"><img width="467" height="405" data-src="/2019/12/09/CommentNotes/2.png"></div>  <h1 id="8194-XML注释"><a href="#8194-XML注释" class="headerlink" title="&#8194;XML注释"></a>&#8194;XML注释</h1><p>&#8195;此类注释可以生成XML文件。     </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#8195;&lt;strong&gt;注释相关的知识（简要）&lt;/strong&gt;  &lt;/p&gt;
    
    </summary>
    
    
      <category term="C#" scheme="http://yoursite.com/categories/C/"/>
    
    
      <category term="C#窗体程序" scheme="http://yoursite.com/tags/C-%E7%AA%97%E4%BD%93%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>C语言随记</title>
    <link href="http://yoursite.com/2019/11/28/BaseCnotes/"/>
    <id>http://yoursite.com/2019/11/28/BaseCnotes/</id>
    <published>2019-11-28T06:26:45.000Z</published>
    <updated>2020-01-02T02:23:16.281Z</updated>
    
    <content type="html"><![CDATA[<h1 id="8194-概述"><a href="#8194-概述" class="headerlink" title="&#8194;概述"></a>&#8194;概述</h1><p>&#8195;<strong>编程基础，随时记录。</strong>   </p><a id="more"></a><h1 id="8194-基础"><a href="#8194-基础" class="headerlink" title="&#8194;基础"></a>&#8194;基础</h1><h2 id="8194-存储单位"><a href="#8194-存储单位" class="headerlink" title="&#8194;存储单位"></a>&#8194;存储单位</h2><ul><li><strong>最小：</strong> 一个二进制位：bit (b)</li><li><strong>单位：</strong> 一个字节：Byte (B) 1B=8b</li><li>千字节：KB = 2^10 B</li><li>兆字节：MB = 2^20 B</li><li>吉字节：GB = 2^30 B</li><li>太字节：TB = 2^40 B  </li></ul><h2 id="8194-extern-static"><a href="#8194-extern-static" class="headerlink" title="&#8194;extern/static"></a>&#8194;extern/static</h2><ul><li>extern : 修饰全局变量    </li><li>static : 修饰局部变量    </li></ul><p>&#8195;函数声明默认为<strong>全局可见</strong>的，即extern：<br>&#8195;<code>int sum(int a,int b)</code><br>&#8195;相当于：<br>&#8195;<code>extern int sum(int a,int b)</code><br>&#8195;所以想定义为只单个.c文件可用，其他文件无法访问，则需要static修饰：<br>&#8195;<code>static int sum(int a,int b)</code>     </p><p>&#8195;相反的：变量声明默认为局部的，即static:<br>&#8195;<code>int a</code><br>&#8195;相当于：<br>&#8195;<code>static int a</code><br>&#8195;要想在其他.c文件中访问，则需要extern修饰：<br>&#8195;<code>extern int a</code>    </p><p>&#8195;如果不想别人修改a的值，则需要const修饰（静态的/不可变的）：<br>&#8195;<code>extern const int a</code>  </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;8194-概述&quot;&gt;&lt;a href=&quot;#8194-概述&quot; class=&quot;headerlink&quot; title=&quot;&amp;#8194;概述&quot;&gt;&lt;/a&gt;&amp;#8194;概述&lt;/h1&gt;&lt;p&gt;&amp;#8195;&lt;strong&gt;编程基础，随时记录。&lt;/strong&gt;   &lt;/p&gt;
    
    </summary>
    
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
    
      <category term="随记" scheme="http://yoursite.com/tags/%E9%9A%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>改变谷歌背景</title>
    <link href="http://yoursite.com/2019/11/28/GoogleBackground/"/>
    <id>http://yoursite.com/2019/11/28/GoogleBackground/</id>
    <published>2019-11-28T01:54:38.000Z</published>
    <updated>2019-12-05T05:43:09.186Z</updated>
    
    <content type="html"><![CDATA[<h1 id="8194-网页顶部"><a href="#8194-网页顶部" class="headerlink" title="&#8194;网页顶部"></a>&#8194;网页顶部</h1><ul><li>打开设置-&gt;外观-&gt;主题背景，选择喜欢的背景即可。<a id="more"></a><img alt data-src="/2019/11/28/GoogleBackground/1.png"><br><img alt data-src="/2019/11/28/GoogleBackground/2.png">   </li></ul><h1 id="8194-网页主体"><a href="#8194-网页主体" class="headerlink" title="&#8194;网页主体"></a>&#8194;网页主体</h1><ul><li>（同上）打开谷歌商店，选择扩展程序，直接搜索程序名称即可（下面有推荐）。<br><img alt data-src="/2019/11/28/GoogleBackground/3.png"><br>&#8194;这里有很多程序可选。<br><img alt data-src="/2019/11/28/GoogleBackground/4.png"><br><img alt data-src="/2019/11/28/GoogleBackground/5.png"> </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;8194-网页顶部&quot;&gt;&lt;a href=&quot;#8194-网页顶部&quot; class=&quot;headerlink&quot; title=&quot;&amp;#8194;网页顶部&quot;&gt;&lt;/a&gt;&amp;#8194;网页顶部&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;打开设置-&amp;gt;外观-&amp;gt;主题背景，选择喜欢的背景即可。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="随记" scheme="http://yoursite.com/tags/%E9%9A%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Next6.0</title>
    <link href="http://yoursite.com/2019/11/27/HexoNotes/"/>
    <id>http://yoursite.com/2019/11/27/HexoNotes/</id>
    <published>2019-11-27T05:23:33.000Z</published>
    <updated>2019-12-04T01:42:09.214Z</updated>
    
    <content type="html"><![CDATA[<p>&#8195;本文只针对我遇到的情况，next\source\css\目录下没有custom文件，如何修改各种样式，仅供参考。  </p><a id="more"></a>    <h1 id="8194-字色"><a href="#8194-字色" class="headerlink" title="&#8194;字色"></a>&#8194;字色</h1><p>&#8195;在next\source\css_variables\base.styl文件中<br>&#8195;<strong>$grey-dim  = #666;</strong> 这个颜色是写文章普通用字的颜色，就是写的最多的字的颜色，改成自己需要的即可。  </p><ul><li>例：$grey-dim  = #000;（黑色）  </li></ul><h1 id="8194-文章背景"><a href="#8194-文章背景" class="headerlink" title="&#8194;文章背景"></a>&#8194;文章背景</h1><p>&#8195;在next\source\css_schemes\Muse\_menu.styl文件中（注：_schemes\Muse的Muse是主题配置文件中所选用的主题，请进入你选用的主题文件夹），加入：  </p><pre><code class="CSS"><span class="selector-class">.main-inner</span> {        background: #f5f5dc;//文章背景颜色        opacity: 0.8;//文章背景透明度}</code></pre><h1 id="8194-网页背景图片"><a href="#8194-网页背景图片" class="headerlink" title="&#8194;网页背景图片"></a>&#8194;网页背景图片</h1><p>&#8195;在博客源目录\source_data中创建styles.styl文件，写入代码：  </p><pre><code class="CSS"><span class="selector-tag">body</span> {    <span class="attribute">background-image</span>:<span class="built_in">url</span>(/images/back.png);    <span class="attribute">background-repeat</span>: no-repeat;   <span class="attribute">background-attachment</span>:fixed;   <span class="attribute">background-position</span>:<span class="number">50%</span> <span class="number">50%</span>;   }</code></pre><ul><li>本地文件夹：博客源目录\public\images</li><li>外部链接直接写入<code>url(...);</code>括号内。    </li></ul><h1 id="8194-侧边栏背景图片"><a href="#8194-侧边栏背景图片" class="headerlink" title="&#8194;侧边栏背景图片"></a>&#8194;侧边栏背景图片</h1><p>&#8195;在next\source\css_schemes\Muse（最后这个目录为自己所选的风格）文件夹中，_sidebar.styl文件中  </p><pre><code class="CSS"><span class="selector-class">.sidebar</span> {  <span class="attribute">transition</span>: all .<span class="number">4s</span>;  width: $sidebar-desktop;   #前两行本来就有，下面是加入的图片背景  <span class="selector-tag">background</span>: <span class="selector-tag">url</span>(……);  <span class="selector-tag">background-size</span>: <span class="selector-tag">cover</span>;  <span class="selector-tag">background-position</span><span class="selector-pseudo">:center</span>;  <span class="selector-tag">background-repeat</span><span class="selector-pseudo">:no-repeat</span>;  <span class="selector-tag">p</span>,<span class="selector-tag">span</span>,<span class="selector-tag">a</span> {<span class="attribute">color</span>: <span class="number">#222</span>;}   #侧边栏部分字体颜色}  </code></pre><ul><li>外部链接直接写入<code>url(...);</code>括号内。   </li></ul><h1 id="8194-文章宽度"><a href="#8194-文章宽度" class="headerlink" title="&#8194;文章宽度"></a>&#8194;文章宽度</h1><p>&#8195;在next\source\css_variables\base.styl文件内：  </p><pre><code class="CSS">$content-desktop                = 700px;$content-desktop-large          = 800px;$content-desktop-largest        = 900px;  </code></pre><p>&#8195;这三行控制文章在不同屏幕下的显示宽度。</p><h1 id="8194-Muse风格侧边栏宽度"><a href="#8194-Muse风格侧边栏宽度" class="headerlink" title="&#8194;Muse风格侧边栏宽度"></a>&#8194;Muse风格侧边栏宽度</h1><p>&#8195;在next\source\css_variables\Muse.styl文件内：<br><code>$sidebar-width= hexo-config(&#39;sidebar.width&#39;) is a &#39;unit&#39; ? hexo-config(&#39;sidebar.width&#39;) : 320;</code><br>&#8195;改后面的数字即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#8195;本文只针对我遇到的情况，next\source\css\目录下没有custom文件，如何修改各种样式，仅供参考。  &lt;/p&gt;
    
    </summary>
    
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="随记" scheme="http://yoursite.com/tags/%E9%9A%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>文字之美</title>
    <link href="http://yoursite.com/2019/11/26/WordsCollection/"/>
    <id>http://yoursite.com/2019/11/26/WordsCollection/</id>
    <published>2019-11-26T10:16:00.000Z</published>
    <updated>2019-12-11T03:58:57.017Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p align="left">要把所有的夜归还给星河，</p><p align="left">把所有的春光归还给疏疏篱落，</p><p align="left">把所有的慵慵沉迷与不前，归还给过去的我。</p><p align="left">明日之我，胸中有丘壑，立马振山河。</p><p align="right">---德卡先生的信箱</p>  </blockquote><a id="more"></a>  <h1 id="8194-历史"><a href="#8194-历史" class="headerlink" title="&#8194;历史"></a>&#8194;历史</h1><blockquote><p>&#8195;开国大典的时候飞机不够。您说飞两遍，现在再也不需要飞两遍了，要多少有多少。这盛世，如您所愿吧，山河犹在，国泰民安。当年送您的十里长安街，如今已是十里繁荣。</p><p align="right">致：周总理</p>  <p align="right">---佚名</p>   </blockquote><blockquote><p>&#8195;为天地立心，为生民立命，为往圣继绝学，为万世开太平。</p><p align="right">---张载</p>   </blockquote><blockquote><p>&#8195;成功虽无把握，成仁却有决心。</p><p align="right">---黄景升</p>    </blockquote><h1 id="8194-哲理"><a href="#8194-哲理" class="headerlink" title="&#8194;哲理"></a>&#8194;哲理</h1><blockquote><p>&#8195;从来如此，便对么？</p><p align="right">---鲁迅《狂人日记》</p>      </blockquote><blockquote><p>&#8195;“怎样算欺凌？”<br>&#8195;“十人欺负一人算欺凌，一百个人欺负一人也是。”<br>&#8195;“那么一万个人呢？”<br>&#8195;“是正义啊。”</p><p align="right">---《世界命题》</p>   </blockquote><blockquote><p>&#8195;与怪物战斗的人，应当小心自己不要成为怪物。当你远远凝视深渊的时候，深渊也在凝视着你。</p><p align="right">---尼采《善恶的彼岸》</p>   </blockquote><h1 id="8194-人性"><a href="#8194-人性" class="headerlink" title="&#8194;人性"></a>&#8194;人性</h1><blockquote><p>&#8195;人的脆弱和坚强都超乎自己的想象。有时，我可能脆弱得一句话就泪流满面，有时，也发现自己咬着牙走了很长的路。  </p><p align="right">---莫泊桑《一生》</p>   </blockquote><blockquote><p>&#8195;我所有的自负都来自我的自卑，所有的英雄气概都来自于我内心的软弱，所有的振振有词都因为心中满是疑惑。我假装无情，其实痛恨自己深情。我以为人生的意义在于四处游荡流亡，其实只是掩饰至今没有找到愿意驻足的地方。</p><p align="right">---马良《坦白书》</p>    </blockquote><blockquote><p>&#8195;这些年一直在提醒自己一件事情，千万不要感动自己，大部分人看似努力，不过是愚蠢导致的。什么熬夜看书到天亮，连续几天睡几个小时，多久没放假案了。如果这些东西也值得炫耀，那么富士康流水线上任何一个人都比你努力的多了。人难免天生有自怜情绪，唯有时刻保持清醒，才能看清真正的价值在哪里。  </p><p align="right">---于宙《我们这一代人的困惑》</p>   </blockquote><h1 id="8194-爱情"><a href="#8194-爱情" class="headerlink" title="&#8194;爱情"></a>&#8194;爱情</h1><blockquote><p>&#8195;我希望有个如你一般的人，如山间清爽的风，如古城温暖的光。从清晨到傍晚，由山野到书房。只要最后是你，就好。</p><p align="right">---《从你的全世界路过》</p>   </blockquote><h1 id="8194-孤独"><a href="#8194-孤独" class="headerlink" title="&#8194;孤独"></a>&#8194;孤独</h1><blockquote><p>&#8195;一生中总会遇到这样的时候，你的内心已经兵荒马乱天翻地覆了，可是在别人看来你只是比平时沉默了一点，没人会觉得奇怪。这种战争，注定单枪匹马。</p><p align="right">---白岩松《痛并快乐着》</p>     </blockquote><blockquote><p>&#8195;你如果<br>&#8195;缓缓把手举起来<br>&#8195;举到顶<br>&#8195;再突然张开五指<br>&#8195;那恭喜你<br>&#8195;你刚刚给自己放了个烟花  </p><p align="right">---里尔克《一次最多放两个》</p>   </blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p align=&quot;left&quot;&gt;要把所有的夜归还给星河，&lt;/p&gt;&lt;p align=&quot;left&quot;&gt;把所有的春光归还给疏疏篱落，&lt;/p&gt;&lt;p align=&quot;left&quot;&gt;把所有的慵慵沉迷与不前，归还给过去的我。&lt;/p&gt;&lt;p align=&quot;left&quot;&gt;明日之我，胸中有丘壑，立马振山河。&lt;/p&gt;&lt;p align=&quot;right&quot;&gt;---德卡先生的信箱&lt;/p&gt;  
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="文学" scheme="http://yoursite.com/categories/%E6%96%87%E5%AD%A6/"/>
    
    
      <category term="随记" scheme="http://yoursite.com/tags/%E9%9A%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>《数据结构与算法分析——C语言描述》--学习笔记</title>
    <link href="http://yoursite.com/2019/11/26/CDataLenCode/"/>
    <id>http://yoursite.com/2019/11/26/CDataLenCode/</id>
    <published>2019-11-26T02:34:14.000Z</published>
    <updated>2019-12-24T09:07:13.873Z</updated>
    
    <content type="html"><![CDATA[<p>&#8195;<strong>多是书中摘要，少是个人见解。</strong>  </p><a id="more"></a><h1 id="8194-第一章：引论"><a href="#8194-第一章：引论" class="headerlink" title="&#8194;第一章：引论"></a>&#8194;第一章：引论</h1><h2 id="8194-此书讨论的内容"><a href="#8194-此书讨论的内容" class="headerlink" title="&#8194;此书讨论的内容"></a>&#8194;此书讨论的内容</h2><p>&#8195;<strong>对于大量的输入，如何估计代码的运行时间</strong>  </p><h2 id="8194-涉及的数学知识"><a href="#8194-涉及的数学知识" class="headerlink" title="&#8194;涉及的数学知识"></a>&#8194;涉及的数学知识</h2><h3 id="8194-指数"><a href="#8194-指数" class="headerlink" title="&#8194;指数"></a>&#8194;指数</h3><div align="center"><img width="400" height="250" data-src="/2019/11/26/CDataLenCode/1-2-1.png"></div><h3 id="8194-对数"><a href="#8194-对数" class="headerlink" title="&#8194;对数"></a>&#8194;对数</h3><p>&#8195;在计算机科学中，除非特别说明，所有的对数都是以2为底。    </p><div align="center"><img width="555" height="290" data-src="/2019/11/26/CDataLenCode/1-2-2.png"></div><h3 id="8194-级数"><a href="#8194-级数" class="headerlink" title="&#8194;级数"></a>&#8194;级数</h3><div align="center"><img width="250" height="162" data-src="/2019/11/26/CDataLenCode/1-2-3.png"></div>  <h3 id="8194-模运算"><a href="#8194-模运算" class="headerlink" title="&#8194;模运算"></a>&#8194;模运算</h3><ul><li>感兴趣的可以百度了解下，容易出错，需要谨慎使用，我就不写了。</li></ul><h3 id="8194-证明方法"><a href="#8194-证明方法" class="headerlink" title="&#8194;证明方法"></a>&#8194;证明方法</h3><ul><li><p>数学归纳法<br>&#8195;略…… </p></li><li><p>反证法<br>&#8195;例：<br>&#8195;证明：存在无穷多个素数。<br>&#8195;解（<strong>欧几里得</strong>）： 假设存在最大素数P，令<strong>N=2*3*5*7*…*P + 1</strong>，明显N&gt;P,因为P为最大素数，所以N为合数。则N能被2,3,5…P中的一个素数整除，明显，N除以其中任一素数均余1。<br>&#8195;1. N为素数，N&gt;P,与假设矛盾。<br>&#8195;2. N为合数，N必定能被一素数Q整除，且Q不在2,3,5…P中，即: Q &gt; P,与假设矛盾。<br>&#8195;综上:  得证。  </p></li></ul><h3 id="8194-递归简论"><a href="#8194-递归简论" class="headerlink" title="&#8194;递归简论"></a>&#8194;递归简论</h3><p>&#8195;问：递归是否是循环逻辑？<br>&#8195;解：不是，用5得到5才是循环，递归是用5得到4（大概意思，自己理解）  </p><ul><li>注：对于数值计算不要使用递归，切记。    </li></ul><p>&#8195;递归的四条基本法则：  </p><ol><li>基准情况： 必须总有某些基准情况，它无需递归就能解出。  </li><li>不断推进：对于需要递归求解的情形，每一次递归调用都必须要是求解状况朝接近基准情形的方向推进。  </li><li>设计法则：假设所有的递归调用都能运行。  </li><li>合成效益法则: 在求解一个问题的同一实例时，切勿在不同的递归调用中做重复性工作。      </li></ol><h1 id="8194-第二章：算法分析"><a href="#8194-第二章：算法分析" class="headerlink" title="&#8194;第二章：算法分析"></a>&#8194;第二章：算法分析</h1><ul><li><strong>正确性、时间、空间</strong>     </li></ul><h2 id="8194-数学基础"><a href="#8194-数学基础" class="headerlink" title="&#8194;数学基础"></a>&#8194;数学基础</h2><ul><li>四个定义：  <div align="center"><img width="700" height="154" data-src="/2019/11/26/CDataLenCode/2-1.png"></div>   </li></ul><p>&#8195;这边比较的是相对增长率。当将相对增长率应用到算法分析的时候，我们将会明白为什么它是重要的度量。  </p><p>&#8195;这边解释下这四个定义，因为很重要：  </p><ol><li>T(N)的增长率小于等于f(N)。<br>&#8195;这条最常用，平时常看别人描述时间复杂度O(n^2)（大写的O），就是这个含义。<strong>代码的时间复杂度小于等于n^2。</strong>  </li><li>T(N)的增长率大于等于g(N)。  </li><li>T(N)的增长率等于h(N)。  </li><li>T(N)的增长率小于p(N)。  </li></ol><ul><li><p>三个法则  </p><div align="center"><img width="559" height="207" data-src="/2019/11/26/CDataLenCode/2-1-1.png"></div>   </li><li><p>注：算相对增长率的时候会经常用到<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlQjQlOUIlRTUlQkYlODUlRTglQkUlQkUlRTYlQjMlOTUlRTUlODglOTk=" title="https://baike.baidu.com/item/%E6%B4%9B%E5%BF%85%E8%BE%BE%E6%B3%95%E5%88%99"><strong>洛必达法则</strong><i class="fa fa-external-link"></i></span>。</p></li></ul><h2 id="8194-模型"><a href="#8194-模型" class="headerlink" title="&#8194;模型"></a>&#8194;模型</h2><ul><li>这个模型就是一个理想模型，一台理想状态下的电脑，读取数据不耗时等等，方便计算代码的理想运行时间。</li></ul><h2 id="8194-要分析的问题"><a href="#8194-要分析的问题" class="headerlink" title="&#8194;要分析的问题"></a>&#8194;要分析的问题</h2><p>&#8195;代码的运行时间：T(N)平均、T(N)最坏。一半计算最坏情况下代码的运行时长，因为……<br>&#8195;例：最大子序列和问题<br>&#8195;描述：给定一个整数数组A[n]，找到一个具有最大和的连续子数组（子数组最少包含一个元素）。（为方便起见，如果所有整数均为负数，则最大子序列何为0）</p><h2 id="8194-运行时间计算"><a href="#8194-运行时间计算" class="headerlink" title="&#8194;运行时间计算"></a>&#8194;运行时间计算</h2><p>&#8195;这里计算的是大O，最坏情况下的时间：代码可能提前结束，但绝不会拖后。</p><h3 id="8194-一个简单的例子"><a href="#8194-一个简单的例子" class="headerlink" title="&#8194;一个简单的例子"></a>&#8194;一个简单的例子</h3><p>&#8195;这个例子是：计算 $\sum_{i=1}^Ni^3$<br>&#8195;它的运行总时长为：aN+b（a,b为常数），所以他的时间复杂度为O(N)。<br>&#8195;这个例子只为引出下面的一般法则。 </p><h3 id="8194-一般法则"><a href="#8194-一般法则" class="headerlink" title="&#8194;一般法则"></a>&#8194;一般法则</h3><h3 id="8194-最大子序列和问题的解"><a href="#8194-最大子序列和问题的解" class="headerlink" title="&#8194;最大子序列和问题的解"></a>&#8194;最大子序列和问题的解</h3><p>&#8194;<strong>这里我只给出两种解：</strong>  </p><ul><li>次优</li><li>时间复杂度O(N log N )</li><li>递归+分治   </li></ul><pre><code class="C"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;                                </span></span><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span><span class="function"></span>{    <span class="function"><span class="keyword">int</span> <span class="title">MaxSubSum</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> Left, <span class="keyword">int</span> Right)</span></span>;    <span class="keyword">int</span> A[<span class="number">8</span>] = { <span class="number">4</span>,<span class="number">-3</span>,<span class="number">5</span>,<span class="number">-2</span>,<span class="number">-1</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">-2</span> };    <span class="keyword">int</span> a = MaxSubSum(A, <span class="number">0</span>, <span class="number">7</span>);    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a);}<span class="function"><span class="keyword">int</span> <span class="title">MaxSubSum</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> Left, <span class="keyword">int</span> Right)</span></span><span class="function"></span>{    <span class="function"><span class="keyword">int</span> <span class="title">MaxThree</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span>;    <span class="keyword">int</span> MaxLeftSum, MaxRightSum;    <span class="keyword">int</span> MaxLeftBorderSum, MaxRightBorderSum;    <span class="keyword">int</span> LeftBorderSum, RightBorderSum;    <span class="keyword">int</span> Center, i;    <span class="keyword">if</span> (Left == Right)    {        <span class="keyword">if</span> (A[Left] &gt; <span class="number">0</span>)            <span class="keyword">return</span> A[Left];        <span class="keyword">else</span>            <span class="keyword">return</span> <span class="number">0</span>;    }    Center = (Left + Right) / <span class="number">2</span>;    MaxLeftSum = MaxSubSum(A, Left, Center);    MaxRightSum = MaxSubSum(A, Center + <span class="number">1</span>, Right);    MaxLeftBorderSum = <span class="number">0</span>;    LeftBorderSum = <span class="number">0</span>;    <span class="keyword">for</span> (i = Center; i &gt;= Left; i--)    {        LeftBorderSum += A[i];        <span class="keyword">if</span> (LeftBorderSum &gt; MaxLeftBorderSum)            MaxLeftBorderSum = LeftBorderSum;    }    MaxRightBorderSum = <span class="number">0</span>;    RightBorderSum = <span class="number">0</span>;    <span class="keyword">for</span> (i = Center + <span class="number">1</span>; i &lt;= Right; i++)    {        RightBorderSum += A[i];        <span class="keyword">if</span> (RightBorderSum &gt; MaxRightBorderSum)            MaxRightBorderSum = RightBorderSum;    }    <span class="keyword">return</span> MaxThree(MaxLeftSum, MaxRightSum, MaxLeftBorderSum + MaxRightBorderSum);}<span class="function"><span class="keyword">int</span> <span class="title">MaxThree</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span><span class="function"></span>{    <span class="keyword">if</span> (a &gt; b&amp;&amp;a &gt; c)        <span class="keyword">return</span> a;    <span class="keyword">else</span> <span class="keyword">if</span> (b &gt; c)        <span class="keyword">return</span> b;    <span class="keyword">else</span> <span class="keyword">return</span> c;}  </code></pre><ul><li><strong>最优</strong>  </li></ul><h1 id="8194-第三章：表、栈和队列"><a href="#8194-第三章：表、栈和队列" class="headerlink" title="&#8194;第三章：表、栈和队列"></a>&#8194;第三章：表、栈和队列</h1><h2 id="8194-抽象数据类型（ADT）"><a href="#8194-抽象数据类型（ADT）" class="headerlink" title="&#8194;抽象数据类型（ADT）"></a>&#8194;抽象数据类型（ADT）</h2><h2 id="8194-表ADT"><a href="#8194-表ADT" class="headerlink" title="&#8194;表ADT"></a>&#8194;表ADT</h2><h3 id="8194-表的简单数组实现"><a href="#8194-表的简单数组实现" class="headerlink" title="&#8194;表的简单数组实现"></a>&#8194;表的简单数组实现</h3><h3 id="8194-链表"><a href="#8194-链表" class="headerlink" title="&#8194;链表"></a>&#8194;链表</h3><h3 id="8194-程序设计细节"><a href="#8194-程序设计细节" class="headerlink" title="&#8194;程序设计细节"></a>&#8194;程序设计细节</h3><h3 id="8194-常见错误"><a href="#8194-常见错误" class="headerlink" title="&#8194;常见错误"></a>&#8194;常见错误</h3><h3 id="8194-双链表"><a href="#8194-双链表" class="headerlink" title="&#8194;双链表"></a>&#8194;双链表</h3><h3 id="8194-循环链表"><a href="#8194-循环链表" class="headerlink" title="&#8194;循环链表"></a>&#8194;循环链表</h3><h3 id="8194-例子"><a href="#8194-例子" class="headerlink" title="&#8194;例子"></a>&#8194;例子</h3><h3 id="8194-链表的游标实现"><a href="#8194-链表的游标实现" class="headerlink" title="&#8194;链表的游标实现"></a>&#8194;链表的游标实现</h3><h2 id="8194-栈ADT"><a href="#8194-栈ADT" class="headerlink" title="&#8194;栈ADT"></a>&#8194;栈ADT</h2><ul><li>递归-&gt;清晰  </li><li>非递归-&gt;快</li></ul><h2 id="8194-队列ADT"><a href="#8194-队列ADT" class="headerlink" title="&#8194;队列ADT"></a>&#8194;队列ADT</h2><h1 id="8194-第四章：树"><a href="#8194-第四章：树" class="headerlink" title="&#8194;第四章：树"></a>&#8194;第四章：树</h1><h2 id="8194-二叉树"><a href="#8194-二叉树" class="headerlink" title="&#8194;二叉树"></a>&#8194;二叉树</h2><h2 id="8194-查找树ADT——二叉查找树"><a href="#8194-查找树ADT——二叉查找树" class="headerlink" title="&#8194;查找树ADT——二叉查找树"></a>&#8194;查找树ADT——二叉查找树</h2><h2 id="8194-AVL树"><a href="#8194-AVL树" class="headerlink" title="&#8194;AVL树"></a>&#8194;AVL树</h2><h2 id="8194-伸展树"><a href="#8194-伸展树" class="headerlink" title="&#8194;伸展树"></a>&#8194;伸展树</h2><h2 id="8194-树的遍历"><a href="#8194-树的遍历" class="headerlink" title="&#8194;树的遍历"></a>&#8194;树的遍历</h2><h2 id="8194-B-树"><a href="#8194-B-树" class="headerlink" title="&#8194;B-树"></a>&#8194;B-树</h2><h1 id="8194-第五章：散列"><a href="#8194-第五章：散列" class="headerlink" title="&#8194;第五章：散列"></a>&#8194;第五章：散列</h1><h2 id="8194-一般想法"><a href="#8194-一般想法" class="headerlink" title="&#8194;一般想法"></a>&#8194;一般想法</h2><h2 id="8194-散列函数"><a href="#8194-散列函数" class="headerlink" title="&#8194;散列函数"></a>&#8194;散列函数</h2><h2 id="8194-分离链接法"><a href="#8194-分离链接法" class="headerlink" title="&#8194;分离链接法"></a>&#8194;分离链接法</h2><h2 id="8194-开放地址法"><a href="#8194-开放地址法" class="headerlink" title="&#8194;开放地址法"></a>&#8194;开放地址法</h2><h2 id="8194-再散列"><a href="#8194-再散列" class="headerlink" title="&#8194;再散列"></a>&#8194;再散列</h2><h2 id="8194-可扩散列"><a href="#8194-可扩散列" class="headerlink" title="&#8194;可扩散列"></a>&#8194;可扩散列</h2><h1 id="8194-第六章：优先队列（堆）"><a href="#8194-第六章：优先队列（堆）" class="headerlink" title="&#8194;第六章：优先队列（堆）"></a>&#8194;第六章：优先队列（堆）</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#8195;&lt;strong&gt;多是书中摘要，少是个人见解。&lt;/strong&gt;  &lt;/p&gt;
    
    </summary>
    
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
    
      <category term="C-Book" scheme="http://yoursite.com/tags/C-Book/"/>
    
  </entry>
  
  <entry>
    <title>C#随记</title>
    <link href="http://yoursite.com/2019/11/25/C-Notes/"/>
    <id>http://yoursite.com/2019/11/25/C-Notes/</id>
    <published>2019-11-25T06:02:01.000Z</published>
    <updated>2019-12-20T09:32:33.901Z</updated>
    
    <content type="html"><![CDATA[<h1 id="8194-概述"><a href="#8194-概述" class="headerlink" title="&#8194;概述"></a>&#8194;概述</h1><ul><li>写C#程序的相关记录。本文仅仅是自己的一些见解和遇到的问题，<strong>欢迎留言指教、讨论！</strong>     </li></ul><a id="more"></a>      <h1 id="8194-基础"><a href="#8194-基础" class="headerlink" title="&#8194;基础"></a>&#8194;基础</h1><h2 id="8194-Class（类）"><a href="#8194-Class（类）" class="headerlink" title="&#8194;Class（类）"></a>&#8194;Class（类）</h2><pre><code class="C#"><span class="keyword">using</span> System;<span class="keyword">namespace</span> <span class="title">SYW</span>{   <span class="keyword">class</span> <span class="title">Common</span> <span class="comment">//尽量不写代码</span>   {      <span class="comment">//方法1</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayhello</span>(<span class="params"></span>)  <span class="comment">//这是一个方法，也是动作</span></span><span class="function"></span>     {       Console.WriteLine(<span class="string">"hello!"</span>);     }     <span class="comment">//方法2  你好</span>     <span class="comment">//方法3  我好</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">common</span>(<span class="params"></span>) <span class="comment">//构造函数，可写参数。</span></span><span class="function"></span>     {       <span class="comment">//初始化，默认执行</span>     }     ~Common() <span class="comment">//析构函数，无参数，无返回值，其它地方完全访问不到。</span>     {       <span class="comment">//结束程序时执行</span>       <span class="comment">//例：</span>       <span class="comment">//如果这个类Common,负责处理串口，开始时打开了串口ComPort;</span>       ComPort.Close();     }   }   <span class="keyword">class</span> <span class="title">main</span>  <span class="comment">//注意，我写了两个类</span>   {     <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><span class="function"></span>     {       Common objCommon=<span class="keyword">new</span> Common(); <span class="comment">//1.构造函数已经执行；2.没写构造函数的，也执行了；3.Common(参数，...)，这里可以写参数的（参数化构造函数）。</span>       objCommon.sayhello();<span class="comment">//执行了方法1</span>         <span class="comment">//随便执行什么（Common里写得方法）</span>     }   }<span class="comment">//执行析构函数。。。</span>}<span class="comment">//随笔，随笔。。。</span><span class="comment">//附：主函数里new了objCommon,其实Common.sayhello();也行</span></code></pre><h1 id="8194-问题"><a href="#8194-问题" class="headerlink" title="&#8194;问题"></a>&#8194;问题</h1><h2 id="8194-程序调试运行无反应"><a href="#8194-程序调试运行无反应" class="headerlink" title="&#8194;程序调试运行无反应"></a>&#8194;程序调试运行无反应</h2><ul><li>加载各个窗体时，有一个窗体初始化函数内，写了一个<strong>需要一直循环的函数</strong>。点击调试运行时，初始化函数一直在运行，所以界面加载不出来，看起来就毫无反应。</li><li><strong>解：</strong> 写了个线程，加载时打开线程，在线程中<code>while(true){...}</code>做需要一直做的事，就行了。  </li></ul><h1 id="8194-随笔"><a href="#8194-随笔" class="headerlink" title="&#8194;随笔"></a>&#8194;随笔</h1><h2 id="8194-绘图"><a href="#8194-绘图" class="headerlink" title="&#8194;绘图"></a>&#8194;绘图</h2><ul><li>Graphics绘图  </li><li><strong>优点：</strong> 全面：所有线条，字体等等都由自己选择。  </li><li><strong>缺点：</strong> 绘制动图有点费劲，<code>Graphics.Clear(60,255,255,255);</code>//Clear函数只能以指定颜色重绘画布Bitmap，参数1：透明度（可不写），参数234：三原色。   </li></ul><h3 id="8194-控件Panel"><a href="#8194-控件Panel" class="headerlink" title="&#8194;控件Panel"></a>&#8194;控件Panel</h3><p>&#8195;Panel外观：Backgroundimage，可以Panel.Backgroundimage=Bitmap加载图画。而且Panel.Paint事件可以在加载的背景上绘图。  </p><h1 id="8194-知识点"><a href="#8194-知识点" class="headerlink" title="&#8194;知识点"></a>&#8194;知识点</h1><h2 id="8194-App-config"><a href="#8194-App-config" class="headerlink" title="&#8194;App.config"></a>&#8194;App.config</h2><h3 id="8194-添加"><a href="#8194-添加" class="headerlink" title="&#8194;添加"></a>&#8194;添加</h3><p>&#8195;右击（项目）-&gt;添加-&gt;新建项-&gt;Visual C#项-&gt;应用程序配置文件。打开文件如下：     </p><pre><code class="C#">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span> ?&gt;&lt;configuration&gt;&lt;/configuration&gt;</code></pre><p>&#8195;添加本地Oracle数据库连接，名称是<code>name=&quot;ConnectionString&quot;</code> ,随便起。  </p><pre><code class="C#">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span> ?&gt;&lt;configuration&gt;  &lt;connectionStrings&gt;    &lt;<span class="keyword">add</span> name=<span class="string">"ConnectionString"</span> connectionString=<span class="string">"Data Source= (DESCRIPTION = (ADDRESS = (PROTOCOL = TCP)(HOST = localhost)(PORT = 1521))(CONNECT_DATA =(SERVER = DEDICATED)(SERVICE_NAME = HYDB)));User Id=XXX;Password=XXX;"</span>/&gt;  &lt;/connectionStrings&gt;&lt;/configuration&gt;  </code></pre><h3 id="8194-获取"><a href="#8194-获取" class="headerlink" title="&#8194;获取"></a>&#8194;获取</h3><p>&#8195;<code>public static string strConnectionString =</code><br><code>System.Configuration.ConfigurationManager.ConnectionStrings[&quot;ConnectionString&quot;].ToString();</code>      </p><h2 id="8194-Time"><a href="#8194-Time" class="headerlink" title="&#8194;Time"></a>&#8194;Time</h2><h3 id="8194-时间格式"><a href="#8194-时间格式" class="headerlink" title="&#8194;时间格式"></a>&#8194;时间格式</h3><p><code>DateTime TimeNow= DateTime.Now.ToString();//2019-12-12 1:12:12 Length=18</code></p><ul><li>我们需要的是<strong>固定长度和格式</strong>的时间或字符串。<br><code>&quot;2019-12-12 01:12:12//Length=19&quot;</code>  </li><li>所以<code>DateTime TimeNow= DateTime.Now.ToString(&quot;yyyy/MM/dd HH:mm:ss&quot;);//是必须的</code>   </li></ul><h3 id="8194-时间转换"><a href="#8194-时间转换" class="headerlink" title="&#8194;时间转换"></a>&#8194;时间转换</h3><pre><code class="C#">DateTime TimeNow = DateTime.Parse(<span class="string">"2019/12/12 01:00:01"</span>);label1.Text = TimeNow.ToString();<span class="comment">//  2019/12/12 1:00:01</span></code></pre><h3 id="8194-时间计算"><a href="#8194-时间计算" class="headerlink" title="&#8194;时间计算"></a>&#8194;时间计算</h3><ul><li>时间差计算    </li></ul><pre><code class="C#">DateTime TimeNow, TimePast;  <span class="comment">// 意思意思，没赋值</span>TimeSpan TimeDiffer = TimeNow.Subtract(TimePast);<span class="comment">//以下都是  double</span>TimeDiffer.TotalDays;TimeDiffer.TotalHours;TimeDiffer.TotalMinutes;TimeDiffer.TotalSeconds;</code></pre><ul><li>时间加减计算     </li></ul><pre><code class="C#">DateTime TimeNow, TimePast;TimeNow=TimePast.AddHours(<span class="number">-4</span>);TimeNow=TimePast.AddMinutes(<span class="number">-100</span>);</code></pre><h2 id="8194-绘图-1"><a href="#8194-绘图-1" class="headerlink" title="&#8194;绘图"></a>&#8194;绘图</h2><h3 id="8194-Graphics"><a href="#8194-Graphics" class="headerlink" title="&#8194;Graphics"></a>&#8194;Graphics</h3><pre><code class="C#">Bitmap Background = <span class="keyword">new</span> Bitmap(<span class="number">1200</span>,<span class="number">680</span>);<span class="comment">//画板</span>Graphics Grap = Graphics.FromImage(Background);<span class="comment">//加载画板</span>Grap.DrawLine(<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>);Grap.DrawLine(Pen pen,<span class="keyword">float</span> x1,<span class="keyword">float</span> y1,<span class="keyword">float</span> x2,<span class="keyword">float</span> y2);</code></pre><h2 id="8194-线程"><a href="#8194-线程" class="headerlink" title="&#8194;线程"></a>&#8194;线程</h2><ul><li>创建并打开线程   </li></ul><pre><code class="C#">Thread Study = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadStart(StudyFunction));Study.Start();<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">StudyFunction</span>(<span class="params"></span>)</span><span class="function"></span>{ <span class="keyword">while</span>(<span class="literal">true</span>){     ......     Thread.Sleep(<span class="number">1000</span>*<span class="number">30</span>)<span class="comment">//线程睡30S</span> }}</code></pre><ul><li>操作线程      </li></ul><pre><code class="C#">Study.Suspend()<span class="comment">//挂起，暂时不做了</span>Study.Resume()<span class="comment">//恢复，继续刚才没做完的</span>Study.Abort()<span class="comment">//停止，杀死该进程</span>Study.Join()<span class="comment">//等待Study完成主线程继续</span>Study.Join(<span class="number">1000</span>*<span class="number">30</span>)<span class="comment">//主线程等待30S</span></code></pre><h2 id="8194-事件"><a href="#8194-事件" class="headerlink" title="&#8194;事件"></a>&#8194;事件</h2><ul><li><code>MouseClick = MouseDown + MouseUp</code>（一般执行完Down/Up会自动继续执行Click）</li><li><strong>注：</strong><br>&#8195;<strong>由主线程进入一个需要持续一段时间的程序，例如：</strong>      </li></ul><pre><code class="C#"><span class="keyword">bool</span> Flag;MouseDown() <span class="comment">//这段程序写个意思，意思意思。</span>{    Flag=<span class="literal">true</span>;  <span class="keyword">while</span>(Flag)  {     .......     <span class="comment">//比如：缩小图片，按下鼠标就一直慢慢缩小</span>     <span class="comment">//明显这个函数在一直做</span>  }}MouseUp(){  Flag=<span class="literal">false</span>;<span class="comment">//当鼠标松开，主程序依旧在MouseDown中，并不会执行Flag=false</span>}</code></pre><p>&#8195;想法很好，可惜没用！我就是从这领悟的：<strong>主函数不可能进入<code>while(true){...}//打断条件在while外</code>，因为无法跳出，除非有子线程将while条件变为false,但是何必呢！</strong>（其实就是进死循环了。。。但我不想承认！）</p><ul><li>解：  </li></ul><pre><code class="C#">MouseDown() <span class="comment">//这段程序写个意思，意思意思。</span>{  打开线程A}MouseUp(){  杀死线程A}</code></pre><p>&#8195;<strong>没事就开个线程玩玩，不然CPU多闲的慌！！！</strong>    </p><h2 id="8194-跨线程设置控件值"><a href="#8194-跨线程设置控件值" class="headerlink" title="&#8194;跨线程设置控件值"></a>&#8194;跨线程设置控件值</h2><pre><code class="C#"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetlabTimeNow</span>(<span class="params"><span class="keyword">string</span> txt</span>)<span class="comment">//可跨线程调用，设置label的文本，某些其他控件亦可。</span></span><span class="function"></span>{    <span class="keyword">if</span> (labTimenow.InvokeRequired)    {        Action&lt;<span class="keyword">string</span>&gt; <span class="keyword">set</span> = (x) =&gt; { labTimenow.Text = x.ToString(); };        labTimenow.Invoke(<span class="keyword">set</span>, txt);    }    <span class="keyword">else</span>    {        labTimenow.Text = txt;    }}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;8194-概述&quot;&gt;&lt;a href=&quot;#8194-概述&quot; class=&quot;headerlink&quot; title=&quot;&amp;#8194;概述&quot;&gt;&lt;/a&gt;&amp;#8194;概述&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;写C#程序的相关记录。本文仅仅是自己的一些见解和遇到的问题，&lt;strong&gt;欢迎留言指教、讨论！&lt;/strong&gt;     &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="C#" scheme="http://yoursite.com/categories/C/"/>
    
    
      <category term="随记" scheme="http://yoursite.com/tags/%E9%9A%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Oracle语句</title>
    <link href="http://yoursite.com/2019/11/22/oraclestate/"/>
    <id>http://yoursite.com/2019/11/22/oraclestate/</id>
    <published>2019-11-22T06:38:52.000Z</published>
    <updated>2019-12-20T09:15:47.026Z</updated>
    
    <content type="html"><![CDATA[<h1 id="8194-基础语句"><a href="#8194-基础语句" class="headerlink" title="&#8194;基础语句"></a>&#8194;基础语句</h1><h2 id="8194-概述"><a href="#8194-概述" class="headerlink" title="&#8194;概述"></a>&#8194;概述</h2><ul><li>Oracle语句与SQL语句还是有很多不一样的地方。  </li><li>都是些基础的，复杂的再说吧！      <a id="more"></a>       </li></ul><h2 id="8194-查询"><a href="#8194-查询" class="headerlink" title="&#8194;查询"></a>&#8194;查询</h2><p><code>select * from table       //显示表table中所有数据</code>     </p><h3 id="8194-时间"><a href="#8194-时间" class="headerlink" title="&#8194;时间"></a>&#8194;时间</h3><p><code>select * from table where sysdate-1 &lt;=Time  //Time为表table中，时间列，列名（此句：查找一天内数据）</code><br><code>select * from table where sysdate-1/24 &lt;=Time  //Time为表table中，时间列，列名（此句：查找1H内数据）</code>       </p><h3 id="8194-排序"><a href="#8194-排序" class="headerlink" title="&#8194;排序"></a>&#8194;排序</h3><p><code>select * from table1 order by field1,field2 [desc]</code></p><h3 id="8194-求和"><a href="#8194-求和" class="headerlink" title="&#8194;求和"></a>&#8194;求和</h3><p><code>select sum(field1) as sumvalue from table1</code>     </p><h3 id="8194-平均"><a href="#8194-平均" class="headerlink" title="&#8194;平均"></a>&#8194;平均</h3><p><code>select avg(field1) as avgvalue from table1</code>    </p><h3 id="8194-最大-最小"><a href="#8194-最大-最小" class="headerlink" title="&#8194;最大/最小"></a>&#8194;最大/最小</h3><p><code>select max(field1) as maxvalue from table1</code><br><code>select min(field1) as maxvalue from table1</code>  </p><h2 id="8194-插入"><a href="#8194-插入" class="headerlink" title="&#8194;插入"></a>&#8194;插入</h2><p><code>insert into table1(field1,field2) values(value1,value2)</code>    </p><h2 id="8194-删除"><a href="#8194-删除" class="headerlink" title="&#8194;删除"></a>&#8194;删除</h2><p><code>delete from table1 where 范围</code>  </p><h2 id="8194-更新（改）"><a href="#8194-更新（改）" class="headerlink" title="&#8194;更新（改）"></a>&#8194;更新（改）</h2><p><code>update table1 set field1=value1 where 范围</code>  </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;8194-基础语句&quot;&gt;&lt;a href=&quot;#8194-基础语句&quot; class=&quot;headerlink&quot; title=&quot;&amp;#8194;基础语句&quot;&gt;&lt;/a&gt;&amp;#8194;基础语句&lt;/h1&gt;&lt;h2 id=&quot;8194-概述&quot;&gt;&lt;a href=&quot;#8194-概述&quot; class=&quot;headerlink&quot; title=&quot;&amp;#8194;概述&quot;&gt;&lt;/a&gt;&amp;#8194;概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Oracle语句与SQL语句还是有很多不一样的地方。  &lt;/li&gt;
&lt;li&gt;都是些基础的，复杂的再说吧！&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Oracle" scheme="http://yoursite.com/categories/Oracle/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>解数独</title>
    <link href="http://yoursite.com/2019/11/22/shudu/"/>
    <id>http://yoursite.com/2019/11/22/shudu/</id>
    <published>2019-11-22T05:54:54.000Z</published>
    <updated>2019-12-05T05:40:34.917Z</updated>
    
    <content type="html"><![CDATA[<p>&#8195;主要分享一下解数独的源代码，用到了比较重要的回溯算法！</p><a id="more"></a><center>程序界面</center> <div align="center"><img width="400" height="400" data-src="/2019/11/22/shudu/1.png"></div>  <p>源代码：</p><pre><code class="C#"><span class="keyword">namespace</span> <span class="title">shudu</span>{    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">form</span> : <span class="title">Form</span>    {        <span class="function"><span class="keyword">public</span> <span class="title">form</span>(<span class="params"></span>)</span><span class="function"></span>        {            InitializeComponent();        }        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form1_Load</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span><span class="function"></span>        {            data.ColumnCount = <span class="number">9</span>;            data.RowCount = <span class="number">9</span>;            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)            {                data.Columns[i].Width = <span class="number">41</span>;                data.Rows[i].Height = <span class="number">40</span>;            }            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)            {                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++)                {                    data.Rows[i].Cells[j].Value = <span class="string">""</span>;                }            }        }        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span><span class="function"></span>        {            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++)                {                    <span class="keyword">if</span> (data.Rows[i].Cells[j].Value.ToString() == <span class="string">""</span>)                        data.Rows[i].Cells[j].Value = <span class="string">"."</span>;                }            solveSudoku();        }        <span class="keyword">bool</span> solved = <span class="literal">false</span>;        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">solveSudoku</span>(<span class="params"></span>)</span><span class="function"></span>        {            recursive(<span class="number">0</span>, <span class="number">0</span>);        }        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recursive</span>(<span class="params"><span class="keyword">int</span> row, <span class="keyword">int</span> col</span>)</span><span class="function"></span>        {            <span class="keyword">if</span> (data.Rows[row].Cells[col].Value.ToString()==<span class="string">"."</span>)            {                <span class="keyword">int</span> i = <span class="number">1</span>;                <span class="keyword">for</span> (; i &lt; <span class="number">10</span>; i++)                    <span class="keyword">if</span> (TF(i, row, col))                    {                        write(i, row, col);                        writenext(row, col);                        <span class="keyword">if</span> (!solved) del( row, col);                    }            }            <span class="keyword">else</span> writenext( row, col);        }        <span class="function"><span class="keyword">private</span>  <span class="keyword">bool</span> <span class="title">TF</span>(<span class="params"> <span class="keyword">int</span> num, <span class="keyword">int</span> row, <span class="keyword">int</span> col</span>)</span><span class="function"></span>        {            <span class="keyword">int</span> rowindex = row / <span class="number">3</span>, colindex = col / <span class="number">3</span>;            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)                {                    <span class="keyword">if</span> (data.Rows[rowindex * <span class="number">3</span> + i].Cells[colindex * <span class="number">3</span> + j].Value.ToString() == num.ToString())                        <span class="keyword">return</span> <span class="literal">false</span>;                }            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)            {                <span class="keyword">if</span> (data.Rows[row].Cells[i].Value.ToString() == num.ToString() || data.Rows[i].Cells[col].Value.ToString() == num.ToString())                    <span class="keyword">return</span> <span class="literal">false</span>;            }            <span class="keyword">return</span> <span class="literal">true</span>;        }        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">write</span>(<span class="params"> <span class="keyword">int</span> num, <span class="keyword">int</span> row, <span class="keyword">int</span> col</span>)</span><span class="function"></span>        {            data.Rows[row].Cells[col].Value = num.ToString();        }        <span class="function"><span class="keyword">private</span>  <span class="keyword">void</span> <span class="title">writenext</span>(<span class="params"><span class="keyword">int</span> row, <span class="keyword">int</span> col</span>)</span><span class="function"></span>        {            <span class="keyword">if</span> (row == <span class="number">8</span> &amp;&amp; col == <span class="number">8</span>) solved = <span class="literal">true</span>;            <span class="keyword">else</span> <span class="keyword">if</span> (col &lt; <span class="number">8</span>) recursive(row, col + <span class="number">1</span>);            <span class="keyword">else</span> <span class="keyword">if</span> (row &lt; <span class="number">8</span>) recursive(row + <span class="number">1</span>, <span class="number">0</span>);        }        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">del</span>(<span class="params"><span class="keyword">int</span> row, <span class="keyword">int</span> col</span>)</span><span class="function"></span>        {            data.Rows[row].Cells[col].Value = <span class="string">"."</span>;        }        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button2_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span><span class="function"></span>        {            solved = <span class="literal">false</span>;            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)            {                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++)                {                    data.Rows[i].Cells[j].Value = <span class="string">""</span>;                }            }        }    }}    </code></pre><p>&#8195;程序也放上来，大家可以下下来玩玩。<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1NZV1ByaXZhdGUvU1lXUHJpdmF0ZS5naXRodWIuaW8vcmF3L21hc3Rlci8yMDE5LzExLzIyL3NodWR1L3NodWR1LmV4ZQ==" title="https://github.com/SYWPrivate/SYWPrivate.github.io/raw/master/2019/11/22/shudu/shudu.exe">点击下载<i class="fa fa-external-link"></i></span><br><strong>&#8195;每次求解后，若要求新数独，请刷新充填。</strong><br>&#8195;若要只改变部分格内的值（改变或删除），就继续求解，需要在源代码内加入<code>data_CellValueChanged()</code>函数。我就不多说啦！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#8195;主要分享一下解数独的源代码，用到了比较重要的回溯算法！&lt;/p&gt;
    
    </summary>
    
    
      <category term="C#" scheme="http://yoursite.com/categories/C/"/>
    
    
      <category term="C#窗体程序" scheme="http://yoursite.com/tags/C-%E7%AA%97%E4%BD%93%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Windows指令</title>
    <link href="http://yoursite.com/2019/11/20/runwindows/"/>
    <id>http://yoursite.com/2019/11/20/runwindows/</id>
    <published>2019-11-20T10:14:38.000Z</published>
    <updated>2019-11-29T10:00:55.296Z</updated>
    
    <content type="html"><![CDATA[<h1 id="8194-前言"><a href="#8194-前言" class="headerlink" title="&#8194;前言"></a>&#8194;前言</h1><ul><li>本文主要关于Windows相关指令，<strong>Win+R</strong>打开输入框。输入以下指令即可打开不同功能。    </li></ul><h1 id="8194-环回网络"><a href="#8194-环回网络" class="headerlink" title="&#8194;环回网络"></a>&#8194;环回网络</h1><ul><li>hdwwiz    </li></ul><h1 id="8194-远程桌面"><a href="#8194-远程桌面" class="headerlink" title="&#8194;远程桌面"></a>&#8194;远程桌面</h1><ul><li>mstsc</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;8194-前言&quot;&gt;&lt;a href=&quot;#8194-前言&quot; class=&quot;headerlink&quot; title=&quot;&amp;#8194;前言&quot;&gt;&lt;/a&gt;&amp;#8194;前言&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;本文主要关于Windows相关指令，&lt;strong&gt;Win+R&lt;/strong&gt;
      
    
    </summary>
    
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="随记" scheme="http://yoursite.com/tags/%E9%9A%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>ORA-01045</title>
    <link href="http://yoursite.com/2019/11/20/ORA01045/"/>
    <id>http://yoursite.com/2019/11/20/ORA01045/</id>
    <published>2019-11-20T10:05:45.000Z</published>
    <updated>2019-11-22T06:47:36.635Z</updated>
    
    <content type="html"><![CDATA[<p><code>ORA-01045: user 某某用户 lacks CREATE SESSION privilege; logon denied</code><br><strong>权限问题</strong>：以system用户登录，运行以下指令。<br><code>grant create session,resource  to 某某用户；</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;ORA-01045: user 某某用户 lacks CREATE SESSION privilege; logon denied&lt;/code&gt;&lt;br&gt;&lt;strong&gt;权限问题&lt;/strong&gt;：以system用户登录，运行以下指令。&lt;br&gt;&lt;code&gt;gran
      
    
    </summary>
    
    
      <category term="Oracle" scheme="http://yoursite.com/categories/Oracle/"/>
    
    
      <category term="随记" scheme="http://yoursite.com/tags/%E9%9A%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>ORA-00911</title>
    <link href="http://yoursite.com/2019/11/20/ORA00911/"/>
    <id>http://yoursite.com/2019/11/20/ORA00911/</id>
    <published>2019-11-20T05:51:56.000Z</published>
    <updated>2019-11-22T06:47:22.863Z</updated>
    
    <content type="html"><![CDATA[<p>外部程序操作数据库，书写SQL语句，若如下：<br><code>insert into syw.tempdata(TEMP,TIME) values</code><br> <code>(200,to_date(&#39;2019/11/20 9:46:06&#39;,&#39;YYYY-MM-DD HH24:MI:SS&#39;));</code>   </p><a id="more"></a><p>会报错：ORA-00911<br>因为外部程序中书写SQL语句末尾不用加 <strong>“;”</strong> 号。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;外部程序操作数据库，书写SQL语句，若如下：&lt;br&gt;&lt;code&gt;insert into syw.tempdata(TEMP,TIME) values&lt;/code&gt;&lt;br&gt; &lt;code&gt;(200,to_date(&amp;#39;2019/11/20 9:46:06&amp;#39;,&amp;#39;YYYY-MM-DD HH24:MI:SS&amp;#39;));&lt;/code&gt;   &lt;/p&gt;
    
    </summary>
    
    
      <category term="Oracle" scheme="http://yoursite.com/categories/Oracle/"/>
    
    
      <category term="随记" scheme="http://yoursite.com/tags/%E9%9A%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Windows窗体应用程序</title>
    <link href="http://yoursite.com/2019/11/19/Sensorproject/"/>
    <id>http://yoursite.com/2019/11/19/Sensorproject/</id>
    <published>2019-11-19T05:58:23.000Z</published>
    <updated>2019-12-05T05:40:07.941Z</updated>
    
    <content type="html"><![CDATA[<h1 id="8194-概述"><a href="#8194-概述" class="headerlink" title="&#8194;概述"></a>&#8194;概述</h1><p>&#8195;这是一个被写的尽量<strong>全面而浅显</strong>的<strong>完整的工程项目实例</strong>。<br>&#8195;<strong>语言：C#<br>&#8195;框架：Windows窗体应用程序<br>&#8195;通讯：串口通信（协议：Modbus）<br>&#8195;数据库：Oracle。<br>&#8195;绘图：Graphics类</strong>  </p><a id="more"></a><p>&#8195;这个项目实现了与一个或多个自动化设备通信，自动的读取、修改设备的当前数据、状态，并将需要保存的数据放入Oracle数据库，可以按要求调出查看。  </p><h1 id="8194-前言"><a href="#8194-前言" class="headerlink" title="&#8194;前言"></a>&#8194;前言</h1><p>&#8195;写一个完整的项目，不仅需要<strong>浅显易懂的变量名</strong>，而且需要<strong>非常清晰的错误文档</strong>。这两点非常非常重要！！！在写程序之前，有必要先讨论一下这两点。 </p><p>&#8195;1. 变量名<br>&#8195;举例：GetHexStrFrombytes(byte[] byteSource) {…}<br>&#8195;这个函数的作用是：将传入的字节数组转换成<strong>十六进制字符串</strong>（如：”0106A3C2FF002FE2”）。<br>&#8195;那么显而易见的：GetBytesFromHexStr(string strSource) {…}<br>&#8195;这个函数的作用就是：将传入的十六进制字符串转换为字节数组。<br>&#8195;每写一个函数，都需要在旁边<strong>注释清楚</strong>这个函数的功能。  </p><p>&#8195;2. <strong>错误文档</strong>：<br>&#8195;原因：一个工程项目的线程不少，功能模块更多，正常调试很多问题根本发现不了。<br>&#8195;比如通讯过程中串口断开，是因为哪个线程，哪个功能，还是串口松了，还是设备问题。你很难调试的明白。<br>&#8195;方法：<br>&#8195;1. <strong>给各个线程及功能添加特有Tags，catch异常时，将Tags传入写异常函数(将异常字符串写入List&lt;string&gt; StrlistException)。</strong><br>&#8195;2. <strong>各个线程需要调用同一函数写异常，否则程序易爆炸。</strong><br>&#8195;3. <strong>不同线程可用数字标记，这样调试时（写异常函数）可指定线程写异常，方便追踪。</strong><br>&#8195;4. <strong>关于异常：请加上足够多的修饰（例如：当时的输入、时间、相关的全局变量值等等）。</strong><br>&#8195;上述这些内容对于一个完整工程真的很重要！！！切记。   </p><h1 id="8194-主函数"><a href="#8194-主函数" class="headerlink" title="&#8194;主函数"></a>&#8194;主函数</h1><p>&#8195;概述：基本是废话。<br>&#8195;主函数内容相对简单，页面布局也是个人喜好。<br>&#8195;功能：切换页面（如果只用一个界面都不用切；如果要切，百度一下，很简单）。   </p><h2 id="8195-副主函数（副窗体）"><a href="#8195-副主函数（副窗体）" class="headerlink" title="&#8195;副主函数（副窗体）"></a>&#8195;副主函数（副窗体）</h2><p>&#8195;<strong>如果你没有副窗体，那这就是你的主窗体！</strong><br>&#8195;在窗体上放上你需要的控件，选择合适的事件，编写代码。    </p><h1 id="8194-串口通信"><a href="#8194-串口通信" class="headerlink" title="&#8194;串口通信"></a>&#8194;串口通信</h1><h2 id="8194-概述-1"><a href="#8194-概述-1" class="headerlink" title="&#8194;概述"></a>&#8194;概述</h2><p>&#8195;物理通信方式（不重要）：<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9SUy0yMzI=" title="https://baike.baidu.com/item/RS-232"><strong>RS-232</strong><i class="fa fa-external-link"></i></span>全双工通信。<br>&#8195;通讯协议（Modbus）:RTU模式，自动化领域常用。（下面会简单介绍怎么用）<br>&#8195;<strong>程序通信方式</strong>：收发分开。  </p><h2 id="8194-通信报文"><a href="#8194-通信报文" class="headerlink" title="&#8194;通信报文"></a>&#8194;通信报文</h2><ul><li>写入串口（发）：设备地址+功能代码+数据+<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9DUkMvMTQ1MzM1OQ==" title="https://baike.baidu.com/item/CRC/1453359">CRC<i class="fa fa-external-link"></i></span>校验<br>&#8195;设备地址：0x00~0xF7(可连接248个设备)，假设接入一个设备（地址01）。<br>&#8195;功能代码：0x01~0xFF。假设：01（读数据）、02（写数据），这个需要通信协议。<br>&#8195;数据：寄存器首地址+寄存器数量。这就相当于数组首地址（2 byte）+读取长度（2 byte）。比如：00 FF + 00 01（从地址为255的寄存器开始读一个寄存器数据）。<br>&#8195;CRC校验：占两个字节（2 byte）。可以自己百度下相关内容。下面是我百度后自己写的一个。将：01 01 00 FF 00 01 传入CRC，算出校验码：CD FA。<br>所以，写入串口：01 01 <strong>00 FF 00 01</strong> CD FA</li><li>读取数据（收）：设备地址+功能代码+数据+CRC<br>&#8195;这里唯一不同的就是数据：数据字节数+数据。例如：01 + 01 。<br>&#8195;就是返回了一个字节数据，返回的数据为：0x01，就是返回值为：1 。<br>&#8195;所以返回的报文是：01 01 <strong>01 01</strong> 90 48<br>&#8195;<strong>加粗部分为数据</strong></li></ul><pre><code class="C#"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] <span class="title">CRC</span>(<span class="params"><span class="keyword">byte</span>[] source</span>)<span class="comment">//CRC校验码计算</span></span><span class="function"></span>      {          UInt16 res = <span class="number">0xffff</span>;          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; source.Length; i++)          {              res ^= source[i];              <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)              {                  <span class="keyword">int</span> a = res &amp; <span class="number">1</span>;                  res &gt;&gt;= <span class="number">1</span>;                  <span class="keyword">if</span> (a == <span class="number">1</span>) res ^= <span class="number">0xA001</span>;              }          }          <span class="keyword">byte</span>[] result = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span>];          <span class="keyword">int</span> m = res &amp; <span class="number">0xff</span>;          result[<span class="number">0</span>] = (<span class="keyword">byte</span>)m;          m = res &gt;&gt; <span class="number">8</span>;          result[<span class="number">1</span>] = (<span class="keyword">byte</span>)m;          <span class="keyword">return</span> result;      }</code></pre><h2 id="8194-通信实现"><a href="#8194-通信实现" class="headerlink" title="&#8194;通信实现"></a>&#8194;通信实现</h2><h3 id="8194-概述-2"><a href="#8194-概述-2" class="headerlink" title="&#8194;概述"></a>&#8194;概述</h3><p>&#8195;通信其实一般都不会采用：发送报文–等待接收–接收到–程序继续，这种方式，我也不多说。<br>&#8195;通信的一般方法是：<br><code>public List&lt;string&gt; arrDataToPort = null, arrDataFromPort = null;</code><br>&#8195;发送：创建发送报文线程（DataSend()），不停检查arrDataToPort是否为空，不为空，则lock(arrDataToPort),发出报文，清空arrDataToPort。<br>&#8195;有要发送的报文，就lock(arrDataToPort)，写入报文即可。<br>&#8195;接收：接收自有<strong>接收响应事件</strong>，这里的重点是：将接收到的所有内容放到一个<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9TdHJpbmdCdWlsZGVy" title="https://baike.baidu.com/item/StringBuilder">StringBuilder<i class="fa fa-external-link"></i></span> strData中，然后处理字符串即可。（这个在处理接收数据中再详细讨论）  </p><h1 id="8194-数据库"><a href="#8194-数据库" class="headerlink" title="&#8194;数据库"></a>&#8194;数据库</h1><p>&#8194;数据库及版本：<strong>Oracle 11g</strong>  </p><h2 id="8194-安装"><a href="#8194-安装" class="headerlink" title="&#8194;安装"></a>&#8194;安装</h2><h2 id="8194-建表"><a href="#8194-建表" class="headerlink" title="&#8194;建表"></a>&#8194;建表</h2><p>&#8195;Oracle数据库可以存放二维表，    </p><h3 id="8194-语句"><a href="#8194-语句" class="headerlink" title="&#8194;语句"></a>&#8194;语句</h3><h3 id="8194-结构"><a href="#8194-结构" class="headerlink" title="&#8194;结构"></a>&#8194;结构</h3><h2 id="8194-与C-连接"><a href="#8194-与C-连接" class="headerlink" title="&#8194;与C#连接"></a>&#8194;与C#连接</h2><h1 id="8194-绘图"><a href="#8194-绘图" class="headerlink" title="&#8194;绘图"></a>&#8194;绘图</h1><h2 id="8194-概述-3"><a href="#8194-概述-3" class="headerlink" title="&#8194;概述"></a>&#8194;概述</h2><p>&#8195;绘图部分实现的功能：  </p><ul><li>动态展现4H内的实时数据，直观感受为：曲线不停右移，旧数据从右端消失，新数据加到左端。  </li><li>查看历史，缩放选取。（如下所示）       </li></ul><div align="center"><img width="1190" height="526" data-src="/2019/11/19/Sensorproject/3-1.gif"></div><h2 id="8194-实时曲线"><a href="#8194-实时曲线" class="headerlink" title="&#8194;实时曲线"></a>&#8194;实时曲线</h2><h2 id="8194-查看历史"><a href="#8194-查看历史" class="headerlink" title="&#8194;查看历史"></a>&#8194;查看历史</h2><h1 id="8194-通用"><a href="#8194-通用" class="headerlink" title="&#8194;通用"></a>&#8194;通用</h1><p>&#8195;：：</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;8194-概述&quot;&gt;&lt;a href=&quot;#8194-概述&quot; class=&quot;headerlink&quot; title=&quot;&amp;#8194;概述&quot;&gt;&lt;/a&gt;&amp;#8194;概述&lt;/h1&gt;&lt;p&gt;&amp;#8195;这是一个被写的尽量&lt;strong&gt;全面而浅显&lt;/strong&gt;的&lt;strong&gt;完整的工程项目实例&lt;/strong&gt;。&lt;br&gt;&amp;#8195;&lt;strong&gt;语言：C#&lt;br&gt;&amp;#8195;框架：Windows窗体应用程序&lt;br&gt;&amp;#8195;通讯：串口通信（协议：Modbus）&lt;br&gt;&amp;#8195;数据库：Oracle。&lt;br&gt;&amp;#8195;绘图：Graphics类&lt;/strong&gt;  &lt;/p&gt;
    
    </summary>
    
    
      <category term="C#" scheme="http://yoursite.com/categories/C/"/>
    
    
      <category term="C#窗体程序" scheme="http://yoursite.com/tags/C-%E7%AA%97%E4%BD%93%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="通讯" scheme="http://yoursite.com/tags/%E9%80%9A%E8%AE%AF/"/>
    
      <category term="绘图" scheme="http://yoursite.com/tags/%E7%BB%98%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>《爱如半夜汽笛》</title>
    <link href="http://yoursite.com/2019/11/14/DistantWhistle/"/>
    <id>http://yoursite.com/2019/11/14/DistantWhistle/</id>
    <published>2019-11-14T10:05:07.000Z</published>
    <updated>2019-11-18T10:00:51.660Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>女孩问男孩：“你喜欢我喜欢到什么程度？”</p></blockquote><a id="more"></a><blockquote><p>少年想了想，用沉静的声音说：“半夜汽笛那个程度。”</p></blockquote><blockquote><p>少女默默地等待下文，里面肯定有什么故事。 </p></blockquote><blockquote><p>“一次，半夜突然醒来，”他开始讲述，“确切时间不清楚，大约两三点吧。也就那个时间，什么时候并不重要。总之是夜深时分，我完完全全孤单一人，身边谁也没有，好吗？请你想象一下，四下漆黑一片，什么也看不见，什么也听不见，就连时钟声都听不见，也可能钟停了。我忽然觉得自己正被隔离开来，远离自己认识的人，远离自己熟悉的场所，远得无法置信。在这广大世界上不为任何人所爱，不为任何人理解，不为任何人记起，我发现自己成了这样的存在。”</p></blockquote><blockquote><p>“即使我就这么消失不见，也没有人察觉，那种心情简直就像被塞进厚铁箱沉入深海底。由于气压的关系，心脏开始痛，痛得像要咔哧咔哧裂成两半，这滋味你可知道。”</p></blockquote><blockquote><p>少女点点头，想必她是知道的。</p></blockquote><blockquote><p>少年继续说道，“这大概是人活着的过程中所能体验到的最难以忍受的一种感觉，又伤心又难过，<br>恨不得直接死掉算了。不，不是这样，不是死掉算了，而是假如放在那里不管，就真的死掉了。因为铁箱里的空气越来越稀薄了，这可不是什么比喻，是真的，这也就是深夜里孤单单醒来的含义，这你也明白？”</p></blockquote><blockquote><p>少女再次默默点头，少年停了一会儿。</p></blockquote><blockquote><p>“不过当时听见很远很远的地方有汽笛声，非常非常遥远，到底什么地方有铁路呢？莫名其妙，总之就那么远，声音若有若无，但我知道那是火车的汽笛声，肯定是！黑暗中我竖耳细听，于是又一次听到了汽笛声。很快，我的心脏不再痛了，时针开始走动，铁箱朝海面慢慢浮升，而这都是因为那微弱的汽笛声的关系。”</p></blockquote><blockquote><p>汽笛声的确微弱，听见没听见都分不清，而我就像爱那汽笛一样爱你。</p></blockquote><blockquote><p><strong><p align="right">——村上春树</p></strong>  </p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;女孩问男孩：“你喜欢我喜欢到什么程度？”&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="文学" scheme="http://yoursite.com/categories/%E6%96%87%E5%AD%A6/"/>
    
    
      <category term="让人倾心的文字" scheme="http://yoursite.com/tags/%E8%AE%A9%E4%BA%BA%E5%80%BE%E5%BF%83%E7%9A%84%E6%96%87%E5%AD%97/"/>
    
  </entry>
  
</feed>
